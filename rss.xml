<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://246859.github.io/my-blog-giscus/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://246859.github.io/my-blog-giscus/rss.xml" rel="self" type="application/rss+xml"/>
    <title>寒江蓑笠翁</title>
    <link>https://246859.github.io/my-blog-giscus/</link>
    <description>寒江蓑笠翁的个人博客</description>
    <language>zh-CN</language>
    <pubDate>Wed, 11 Oct 2023 15:26:51 GMT</pubDate>
    <lastBuildDate>Wed, 11 Oct 2023 15:26:51 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>生活随笔</category>
    <category>数据库</category>
    <category>Linux</category>
    <category>技术日志</category>
    <category>游戏杂谈</category>
    <category>问题记录</category>
    <item>
      <title>海边的一段代码</title>
      <link>https://246859.github.io/my-blog-giscus/posts/life/2023_01_22.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/life/2023_01_22.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">海边的一段代码</source>
      <description>海边的一段代码 过年的时候在厦门的海滩上，别人都在写和谁谁相爱一辈子，而我写了一段代码。</description>
      <category>生活随笔</category>
      <pubDate>Sun, 22 Jan 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 海边的一段代码</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111956319.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>过年的时候在厦门的海滩上，别人都在写和谁谁相爱一辈子，而我写了一段代码。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111956319.png" type="image/png"/>
    </item>
    <item>
      <title>一次70KM短途骑行</title>
      <link>https://246859.github.io/my-blog-giscus/posts/life/2023_02_27.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/life/2023_02_27.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">一次70KM短途骑行</source>
      <description>一次70KM短途骑行 从学校出发到江边，硬生生从山底爬到山顶，全程70KM。</description>
      <category>生活随笔</category>
      <pubDate>Mon, 27 Feb 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 一次70KM短途骑行</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/2023227骑行.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从学校出发到江边，硬生生从山底爬到山顶，全程70KM。</p>
<!-- more -->
<hr>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310112002883.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310112002088.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/2023227%E9%AA%91%E8%A1%8C.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Docker上安装MariaDB</title>
      <link>https://246859.github.io/my-blog-giscus/posts/db/docker_install_mariadb.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/db/docker_install_mariadb.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Docker上安装MariaDB</source>
      <description>Docker上安装MariaDB</description>
      <category>数据库</category>
      <pubDate>Fri, 06 Oct 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker上安装MariaDB</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111859077.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>官网：<a href="https://mariadb.org/" target="_blank" rel="noopener noreferrer">MariaDB</a></p>
<p>开源地址：<a href="https://github.com/MariaDB/server" target="_blank" rel="noopener noreferrer">https://github.com/MariaDB/server</a></p>
<p>在Mysql被Oracle收购以后，MySql之父觉得此时的Mysql不再是一个纯粹的开源数据库了。于是没多久便出走了，随后他便从Mysql社区fork出来一个新的分支：MariaDB，到目前为止已经是一个完全的新项目了。该数据库以他女儿的名字来命名的，相比于Mysql而言它是一个完全开源的数据库，在协议和表定义方面完全兼容。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111859077.png" type="image/png"/>
    </item>
    <item>
      <title>Docker上安装MongoDB</title>
      <link>https://246859.github.io/my-blog-giscus/posts/db/docker_install_mongo.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/db/docker_install_mongo.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Docker上安装MongoDB</source>
      <description>Docker上安装MongoDB</description>
      <category>数据库</category>
      <pubDate>Mon, 24 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker上安装MongoDB</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111838486.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>官网：<a href="https://www.mongodb.com/zh-cn" target="_blank" rel="noopener noreferrer">MongoDB</a></p>
<p>mongodb是一个高性能的非关系型数据库，或者说文档数据库因为它的基本单位就是文档，在我的一个开源项目中主要拿它来存游戏信息，比较灵活，存在mysql纯纯是找罪受。mongodb说实话第一次看到的时候，SQL写起来真的反人类，弄成了json的样子，如果语句长了点嵌套多了点，可读性骤然下降。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尤其是花括号看的真的眼花，这玩意在命令行里面敲起来是真滴折磨。</p>
<h3> 镜像</h3>
<p>镜像地址：<a href="https://hub.docker.com/_/mongo" target="_blank" rel="noopener noreferrer">mongo - Official Image | Docker Hub</a></p>
<p>这里我就直接用mongo6</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>镜像拉下来以后看看</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>681MB说实话挺大了</p>
<h3> 配置</h3>
<p>创建要挂载的数据目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建默认的配置文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>写入如下配置</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建默认的日志文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 容器</h3>
<p>运行如下命令创建容器</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的参数</p>
<ul>
<li>环境变量<code>LANG</code>是为了设置数据库字符编码</li>
<li><code>-f /etc/mongo/mongod.conf</code>指定具体的配置文件地址</li>
</ul>
<p>容器创建完毕后，查看一下是否正常运行。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后进入数据库命令行操作</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于初始时是没有默认的用户和密码，所以进来就是test用户，接下来创建一个管理员账号，先写sql</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要有以下权限可以用</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切换倒admin数据库后再创建</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看用户列表</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后，退出然后修改mongo的配置文件添加</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启容器之后再重新登录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 连接</h3>
<p>navicat也支持mongodb数据库，如果上面操作正确的话，连接应该是不会有问题的。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310112316660.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111838486.png" type="image/png"/>
    </item>
    <item>
      <title>Docker上安装Mysql</title>
      <link>https://246859.github.io/my-blog-giscus/posts/db/docker_install_mysql.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/db/docker_install_mysql.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Docker上安装Mysql</source>
      <description>Docker上安装Mysql</description>
      <category>数据库</category>
      <pubDate>Mon, 07 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker上安装Mysql</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111830040.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>官网：<a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener noreferrer">MySQL :: MySQL Documentation</a></p>
<p>mysql是很经典的一个数据库了，刚接触到这个数据库的时候还是刚刚大一下那会，那会在windows上安装把密码给整忘了捣鼓了老半天才整回来。日后在学习的时候，捣鼓中间件都是在本地的Linux虚拟机上+docker捣鼓，再也不会把这些玩意安装在windows上了。</p>
<h3> 镜像</h3>
<p>镜像地址：<a href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener noreferrer">mysql - Official Image | Docker Hub</a></p>
<p>Mysql常用的版本只有8和5，最常用的应该是5.7，不过我在写代码的时候用的都是mysql8。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看下镜像</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 准备</h3>
<p>创建本地用于挂载数据的文件夹</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建mysql配置文件<code>~/db/mysql/conf/my.cnf</code></p>
<div class="language-ini line-numbers-mode" data-ext="ini"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 容器</h3>
<p>运行如下命令，创建容器</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>MYSQL_ROOT_PASSWORD</code>，root用户的默认密码，不指定的话会在输出中显示默认密码</li>
<li><code>MYSQL_DATABASE</code>，默认创建的数据库名</li>
</ul>
<p>看看mysql容器有没有成功运行。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用mysql命令访问数据库</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看有哪些数据库，可以看到hello数据库被成功创建了</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看hello数据库中的表，可以看到空空如也</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 连接</h3>
<p>切换到<code>mysql</code>数据库，然后查看<code>user</code>表</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到root账户默认是允许远程登录的，一般建议创建一个新的账号来用，然后再禁用root远程登录，如果只是自己学习的话那无所谓了，修改完以后记得刷新下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再用navicat连接</p>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111949722.png" style="zoom:50%;">
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111830040.png" type="image/png"/>
    </item>
    <item>
      <title>Docker上安装Redis</title>
      <link>https://246859.github.io/my-blog-giscus/posts/db/docker_install_redis.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/db/docker_install_redis.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Docker上安装Redis</source>
      <description>Docker上安装Redis</description>
      <category>数据库</category>
      <pubDate>Mon, 17 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker上安装Redis</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111832973.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>官网：<a href="https://redis.io/" target="_blank" rel="noopener noreferrer">Redis</a></p>
<p>Redis是我接触的第一个NoSQL数据库，一般是拿来做缓存用，不支持windows。刚开始用的windows版，一看版本redis2，几年没维护了，后面只能在虚拟机上捣鼓了，算是我接触虚拟机和Linux系统的一个契机。</p>
<h3> 镜像</h3>
<p>镜像地址：<a href="https://hub.docker.com/_/redis" target="_blank" rel="noopener noreferrer">redis - Official Image | Docker Hub</a></p>
<p>redis现在的维护版本有6和7，两个的区别就是RESP协议的区别，一个是RESP2，一个是RESP3，理论上来说RESP3应该是兼容RESP2的，不过Redis社区声称以后不会兼容RESP2。这里用的是版本7。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看下镜像</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 配置</h3>
<p>配置文件地址：<a href="https://redis.io/docs/management/config/" target="_blank" rel="noopener noreferrer">https://redis.io/docs/management/config/</a></p>
<p>redis默认是不允许远程连接，而且没有密码，这些需要在配置文件中指定，对应指定版本的redis需要去官网下载配置文件。</p>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310112029549.png" style="zoom: 67%;">
<p>这里选择的是7.0版本的配置文件，首先创建容器的数据挂载文件夹</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后下载配置文件，因为是外网可能不太好下载</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将里面的如下四个配置修改如下值，然后保存退出。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件的路径位于<code>~/db/redis/redis.conf</code>，然后还要记得把日志文件自己创建下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 容器</h3>
<p>运行如下命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建后查看下有没有正常运行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入容器测试下命令行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 连接</h3>
<p>redis客户端软件的话推荐两个，虽然navicat也支持redis连接，但还是那种行列方式看起来相当膈应。</p>
<ul>
<li><a href="https://github.com/RedisInsight/RedisDesktopManager" target="_blank" rel="noopener noreferrer">Redis Manager</a>，开源，c++项目，性能应该要好很多</li>
<li><a href="https://github.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener noreferrer">Another Redis Manager</a>，开源，nodejs项目，目测应该是electron之类构建的，性能没测试过。</li>
</ul>
<p>上面两个都是开源的，且都支持中文，我都有在用，前者毕竟c++写的项目，nodejs性能跟它没法比，但后者界面更加人性化，功能要多很多。</p>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310112123845.png" style="zoom: 67%;">
<p>如果前面的配置正常来搞的话这里连接是不会出问题的。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310112125867.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>可以看到关于redis的很多统计信息。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111832973.png" type="image/png"/>
    </item>
    <item>
      <title>Docker上安装PostgreSql</title>
      <link>https://246859.github.io/my-blog-giscus/posts/db/docker_install_postgres.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/db/docker_install_postgres.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Docker上安装PostgreSql</source>
      <description>Docker上安装PostgreSql</description>
      <category>数据库</category>
      <pubDate>Sat, 30 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker上安装PostgreSql</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111522417.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>官网：<a href="https://www.postgresql.org/" target="_blank" rel="noopener noreferrer">PostgreSQL: The world's most advanced open source database</a></p>
<p>关系型数据库的话以前只学习过mysql一种，最近打算来捣鼓一下大名鼎鼎的postgresql，官网的标题就是<strong>世界上最先进的关系型数据库</strong>。为了方便学习，采用本地虚拟机+docker的方式进行安装。</p>
<h3> 镜像</h3>
<p>首先在dockerhub看看镜像<a href="https://hub.docker.com/_/postgres" target="_blank" rel="noopener noreferrer">postgres - Official Image | Docker Hub</a></p>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111516192.png" alt="" style="zoom: 50%;">
<p>一看postgresql的维护版本这么多，不知道选什么就选最稳的<code>11</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>16版本的话navicat还不太兼容</p>
</div>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看下镜像</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 容器</h3>
<p>运行如下命令创建容i去</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>POSTGRES_PASSWORD</code>，环境变量，设置超级用户默认密码</li>
<li><code>LANG</code>，环境变量，设置字符集</li>
</ul>
<p>跑起来看看看日志</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看看ps</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 命令行</h3>
<p>容器成功运行以后，到数据库命令行里面看看，默认的超级用户名为<code>postgres</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pg的命令行有独特的命令，不像<code>mysql</code>全是SQL语句，一般以下划线<code>\</code>开头，<code>\?</code>查看帮助命令。查看所有的数据库</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看所有用户</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看两个配置文件的地址</p>
<div class="language-go line-numbers-mode" data-ext="go"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>退出命令行</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 远程登录</h3>
<p>pg默认是允许远程登录的，必须得修改其配置文件。修改<code>postgresql.conf</code>文件的中监听地址为如下。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再修改<code>pg_hba.conf</code>，添加如下规则</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完后把容器重启下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111643870.png" style="zoom: 80%;">
<p>然后就可以连接成功了。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111522417.png" type="image/png"/>
    </item>
    <item>
      <title>ubuntu自定义系统服务</title>
      <link>https://246859.github.io/my-blog-giscus/posts/linux/linuxservice.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/linux/linuxservice.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">ubuntu自定义系统服务</source>
      <description>ubuntu自定义系统服务</description>
      <category>Linux</category>
      <pubDate>Sat, 28 Jan 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> ubuntu自定义系统服务</h1>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310111508436.png" style="zoom: 150%;">
<!-- more -->
<hr>
<p>在开发项目时，对于一些后台应用，可以自定义成linux的service，这样能够更加方便的管理。</p>
<p>首先在<code>/etc/systemd/system</code>下，创建一个<code>xxx.service</code>的文件，<code>xxx</code>是服务名。</p>
<p>service文件有特殊的配置格式，下面是一个简单的例子</p>
<div class="language-txt line-numbers-mode" data-ext="txt"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>type</code>有以下几种取值</p>
<ul>
<li>
<p>Type=simple：默认值，执行ExecStart指定的命令，启动主进程</p>
</li>
<li>
<p>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</p>
</li>
<li>
<p>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</p>
</li>
<li>
<p>Type=dbus：当前服务通过D-Bus启动</p>
</li>
<li>
<p>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</p>
</li>
<li>
<p>Type=idle：若有其他任务执行完毕，当前服务才会运行，即后台运行</p>
</li>
</ul>
<p>Restart：定义了退出后，Systemd 的重启方式。可以设置的值如下：</p>
<ul>
<li>
<p>no（默认值）：退出后不会重启；</p>
</li>
<li>
<p>on-success：当进程正常退出时（退出状态码为0），才会重启；</p>
</li>
<li>
<p>on-failure：当进程非正常退出时(退出状态码非0)，包括被信号终止和超时，才会重启；</p>
</li>
<li>
<p>on-abnormal：当被信号终止和超时，才会重启；</p>
</li>
<li>
<p>on-abort：当收到没有捕捉到的信号终止时，才会重启；</p>
</li>
<li>
<p>on-watchdog：看门狗超时退出，才会重启；</p>
</li>
<li>
<p>always：总是重启。</p>
</li>
</ul>
<p>KillMode：定义 Systemd 如何停止服务，可以设置的值如下：</p>
<ul>
<li>
<p>control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉；</p>
</li>
<li>
<p>process：只杀主进程；</p>
</li>
<li>
<p>mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号；</p>
</li>
<li>
<p>none：没有进程会被杀掉。</p>
</li>
</ul>
<p>创建完成后，执行命令重新加载服务文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随后使用<code>service hello service </code> 即可开启</p>
]]></content:encoded>
    </item>
    <item>
      <title>暑假骑行</title>
      <link>https://246859.github.io/my-blog-giscus/posts/life/2023_10_09.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/life/2023_10_09.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">暑假骑行</source>
      <description>暑假骑行 暑假在江边骑行</description>
      <category>生活随笔</category>
      <pubDate>Sat, 22 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 暑假骑行</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091722442.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>暑假在江边骑行</p>
<!-- more -->
<hr>
<p>早上异常的湿热，空气里全是水，站着不动都能汗湿，中午以后直接暴晒，顶着39度的太阳骑行，随行的学弟直接被晒的神志不清，回去以后小臂晒掉一层皮。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091725819.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091725849.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091722442.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>在Linux上搭建K8s集群</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/k8s_install.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/k8s_install.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">在Linux上搭建K8s集群</source>
      <description>在Linux上搭建K8s集群 最近捣鼓了下用虚拟机搭建k8s集群，坑还是挺多的。</description>
      <category>技术日志</category>
      <pubDate>Mon, 25 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 在Linux上搭建K8s集群</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309251850239.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>最近捣鼓了下用虚拟机搭建k8s集群，坑还是挺多的。</p>
<!-- more -->
<hr>
<figure><img src="https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>最近在学习k8s，不得不说这玩意运行起来还是相当的麻烦，这里记录一下，以免后面忘了。事先准备好三台ubuntu22.04虚拟机，一台用作control plane，两台用作worker node。</p>
<h2> 前置准备</h2>
<p>在开始安装k8s之前，需要做一些前置的准备。</p>
<h3> 关闭firewalld</h3>
<p>k8s有着自己的网络策略配置功能，关闭friewalld是为了避免起冲突。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 禁用selinux</h3>
<p>selinux是linux的一个安全子系统，很多服务器未为了避免麻烦都会把它关了，ubuntu在装机的时候不会自带这玩意，但如果你装了的话可以按照下面的步骤关闭。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 关闭swap</h3>
<p>kubelet运行时明确不支持swap，也就是交换内存，一部分原因是想让程序在内存耗尽以后正常OOM而不是一直靠swap苟着从而造成不必要的损失。如果未关闭swap直接启动的话，kubelet在启动时会显示如下信息告诉你应该关闭swap，否则不让你启动。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先执行命令关闭交换分区</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后修改<code>fstab</code>文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注释掉如下行</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行如下命令查看swap分区情况，如果关闭了的话就不会有任何显示</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 配置网络</h3>
<p>转发 IPv4 并让 iptables 看到桥接流量</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过运行以下指令确认 <code>br_netfilter</code> 和 <code>overlay</code> 模块被加载：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过运行以下指令确认 <code>net.bridge.bridge-nf-call-iptables</code>、<code>net.bridge.bridge-nf-call-ip6tables</code> 和 <code>net.ipv4.ip_forward</code> 系统变量在你的 <code>sysctl</code> 配置中被设置为 1</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> CRI</h2>
<p>Container Runtime Interface（CRI），即容器运行时接口，要想使用K8s的话，需要系统提供CRI，目前实现了CRI的软件的有</p>
<ul>
<li>containerd，推荐用这个，比较轻量。</li>
<li>docker engine，并没有实现CRI但是可以通过其它方法桥接，不过一般安装了docker engine的系统都会有containerd，因为containerd就是docker的一部分，所以还是建议用containerd。</li>
<li>CRI-O</li>
<li>MCR</li>
</ul>
<h3> containerd</h3>
<p>下面会用containerd来做演示，其实containerd安装过程就是docker安装过程，先设置docker官方的apt仓库</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://xn--containerd-j05qpn034ff9b232ee69h.io" target="_blank" rel="noopener noreferrer">最后就只安装containerd.io</a>，不用安装dcoker-ce和docker-cli。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者你也可以直接下载containerd的二进制文件，它也是用go写的。在安装好后，需要配置systemd cgroup驱动，在containerd配置文件中</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改如下的配置项</p>
<div class="language-toml line-numbers-mode" data-ext="toml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>使用如下命令可以重置containerd配置</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>
<p>从软件包安装的话可能会默认禁用CRI，在配置文件中可能会看到这么一行，将其去掉就行。</p>
<div class="language-toml line-numbers-mode" data-ext="toml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完后重启containerd</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 安装</h2>
<p>配置下k8s的阿里云apt源</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新证书</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再更新源</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后安装<code>kubeadm</code>，<code>kubectl</code>，<code>kubelet</code>，这三个最好软件版本保持一致。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成后确认版本</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确认版本一致后，看看k8s的镜像，后续必须pull这些镜像，因为这是k8s集群运行的必要组件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，系统上会有下面这几个东西</p>
<ul>
<li><code>kebuadm</code>，用来快速启动和搭建k8s集群的工具，可以省去我们很多操作。</li>
<li><code>kubelet</code>，k8s集群命令行管理工具</li>
<li><code>kubelet</code>，代表着一个节点，是k8s集群的基本单位。</li>
<li><code>crictl</code>，容器运行时管理工具，只不过它是为k8s工作的，正确使用的前提是系统上安装了支持CRI的软件并正确指定了endpoint。</li>
<li><code>ctr</code>，ctr是containerd的命令管理工具，containerd实现了CRI。</li>
</ul>
<h3> cri endpoint</h3>
<p>ctrctl虽然是容器运行时管理工具，但是它并没有具体的实现，只是定义了一组接口规范。要想正常工作还得依赖具体的实现了CRI的软件，之前已经安装好了containerd，所以运行前要先指定crictl的<code>runtime-endpoint</code>，也就是containerd的sock地址。</p>
<p>通过查看配置文件<code>etc/containerd/config.toml</code>可以得知</p>
<div class="language-toml line-numbers-mode" data-ext="toml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么endpoint就是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以执行如下命令配置crictl</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 拉镜像</h3>
<p>kubeadm支持通过命令预先拉取需要用到的组件镜像，也就是之前list出来的镜像，执行如下命令就可以预先拉取要用到的镜像。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是不出意外的话，意外就会发生了，上述的镜像仓库是<code>registry.k8s.io</code>，是由谷歌托管的，国内基本上没法访问，甚至于在线获取版本信息都不行</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法就是国内的镜像，阿里云有一个镜像仓库，地址如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>网上有很多教程直接在<code>kubeadm init</code>时直接指定了阿里云镜像仓库，这样会导致kubelet没法正常运行，会说找不到组件的镜像，因为kubelet运行的时候只认<code>registry.k8s.io</code>镜像，而通过阿里云镜像仓库拉下来的镜像的前缀是<code>registry.aliyuncs.com/google_containers</code>，所以kubelet自然就没法启动了。所以对应的，拉取完下面的镜像后，应该将其名字改回去。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>crictl并不能修改镜像名，这是ctr应该干的事情，为了能够查看到k8s的镜像，指定命名空间<code>k8s.io</code></p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个个改名太麻烦了，所以我写了一个脚本，来自动化完成这个过程。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者也可以</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 初始化</h3>
<p>接下来使用kubeadm来初始化，这个操作只用在master节点进行。init时有很多参数，开始前可以看看命令帮助。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就开始初始化，如果上面的配置都做好了的话，是不会出现问题的。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309251850239.png" type="image/png"/>
    </item>
    <item>
      <title>黑暗之魂I：重制版</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/darksoul1.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/darksoul1.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">黑暗之魂I：重制版</source>
      <description>黑暗之魂I：重制版 开山之作，地图设计极其优秀，三部曲中氛围最好，也是最喜欢的。</description>
      <category>游戏杂谈</category>
      <pubDate>Mon, 12 Aug 2019 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 黑暗之魂I：重制版</h1>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091210402.jpg" style="zoom:150%;">
<p>开山之作，地图设计极其优秀，三部曲中氛围最好，也是最喜欢的。</p>
<!-- more -->
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>黑暗之魂II：原罪学者</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/darksoul2.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/darksoul2.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">黑暗之魂II：原罪学者</source>
      <description>黑暗之魂II：原罪学者 自身足够优秀，但是相比于它的前辈和后辈就有点黯然失色了。</description>
      <category>游戏杂谈</category>
      <pubDate>Fri, 09 Apr 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 黑暗之魂II：原罪学者</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091200973.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>自身足够优秀，但是相比于它的前辈和后辈就有点黯然失色了。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091200973.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>黑暗之魂III：火之将熄</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/darksoul3.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/darksoul3.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">黑暗之魂III：火之将熄</source>
      <description>黑暗之魂III：火之将熄 延续了一贯的风格，魂系列的佳作。</description>
      <category>游戏杂谈</category>
      <pubDate>Tue, 08 Sep 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 黑暗之魂III：火之将熄</h1>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091205455.jpg" style="zoom:150%;">
<p>延续了一贯的风格，魂系列的佳作。</p>
<!-- more -->
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>艾尔登法环</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/elden_ring.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/elden_ring.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">艾尔登法环</source>
      <description>艾尔登法环 魂系列集大成之作，唯一一个全成就的游戏，首发预购的含金量</description>
      <category>游戏杂谈</category>
      <pubDate>Fri, 25 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 艾尔登法环</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091102051.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>魂系列集大成之作，唯一一个全成就的游戏，首发预购的含金量</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091102051.png" type="image/png"/>
    </item>
    <item>
      <title>激流快艇</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/gp.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/gp.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">激流快艇</source>
      <description>激流快艇 初中在家里的智能电视上玩的激流快艇2，童年回忆之一，第三部是18年出的，人长大了但电视还是那个电视，现在还能玩不过卡跟ppt一样。</description>
      <category>游戏杂谈</category>
      <pubDate>Mon, 09 Oct 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 激流快艇</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091035367.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>初中在家里的智能电视上玩的激流快艇2，童年回忆之一，第三部是18年出的，人长大了但电视还是那个电视，现在还能玩不过卡跟ppt一样。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091035367.png" type="image/png"/>
    </item>
    <item>
      <title>天国拯救</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/kingdom_come.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/kingdom_come.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">天国拯救</source>
      <description>天国拯救 一个铁匠儿子成长为剑术大师的故事，剧情挺好，战斗太难了，为了看剧情开修改器过的。</description>
      <category>游戏杂谈</category>
      <pubDate>Sun, 05 Sep 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 天国拯救</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091146687.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>一个铁匠儿子成长为剑术大师的故事，剧情挺好，战斗太难了，为了看剧情开修改器过的。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091146687.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>生化危机2 重制版</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/re2.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/re2.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">生化危机2 重制版</source>
      <description>生化危机2 重制版 第一次玩的时候还有点吓人，后面逛警察局就跟回家一样，游戏质量很高。</description>
      <category>游戏杂谈</category>
      <pubDate>Sat, 10 Jul 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 生化危机2 重制版</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091115507.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>第一次玩的时候还有点吓人，后面逛警察局就跟回家一样，游戏质量很高。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091115507.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>只狼：影逝二度</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/sekrio.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/sekrio.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">只狼：影逝二度</source>
      <description>只狼：影逝二度 老贼非常成功的创新，游戏内容不算特别多，但胜在短小精悍。</description>
      <category>游戏杂谈</category>
      <pubDate>Sat, 07 Nov 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 只狼：影逝二度</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091218744.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>老贼非常成功的创新，游戏内容不算特别多，但胜在短小精悍。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091218744.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>巫师三：狂猎</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/witcher.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/witcher.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">巫师三：狂猎</source>
      <description>巫师三：狂猎 先看小说再玩游戏，我愿称之为开放世界天花板。</description>
      <category>游戏杂谈</category>
      <pubDate>Thu, 17 Dec 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 巫师三：狂猎</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091154859.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>先看小说再玩游戏，我愿称之为开放世界天花板。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202310091154859.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>数据库被注入恶意信息</title>
      <link>https://246859.github.io/my-blog-giscus/posts/problem/mysqlinject.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/problem/mysqlinject.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">数据库被注入恶意信息</source>
      <description>数据库被注入恶意信息</description>
      <category>问题记录</category>
      <pubDate>Fri, 22 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 数据库被注入恶意信息</h1>
<!-- more -->
<hr>
<h2> 分析</h2>
<p>前段时间搭建了个gitea自用，有一天上去过后发现web一直显示500，想着重启试试，结果发现再也重启不能。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在日志这一块，看到了这么个东西，类似一串js代码，后面去看了下数据库，不看不得了，一看吓一跳，数据库里很多表的字段内容都被纂改了</p>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309221547220.png" style="zoom:50%;">
<p>完整内容如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>中间是一段base64编码的url，解码过后就是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>大概是想实现js代码被加载的时候自动跳转到这个网站，这个网站后面去看了下，就是个普通的色情网站。</p>
<h2> 问题</h2>
<p>问题出现在root密码太过简单，就是123456，由于在使用的时候用的是另一个数据库账号，初始化的root密码忘记改了，所以还是留着123456没有变，这才有了可乘之机。</p>
<h2> 解决</h2>
<p>最后是手动将脏数据清洗掉，才恢复了正常，以后还是要定时备份，做好安全工作。</p>
]]></content:encoded>
    </item>
    <item>
      <title>在Linux上使用clash</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/clash_on_linux.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/clash_on_linux.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">在Linux上使用clash</source>
      <description>在Linux上使用clash</description>
      <category>技术日志</category>
      <pubDate>Thu, 14 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 在Linux上使用clash</h1>
<figure><img src="https://github.com/Dreamacro/clash/raw/master/docs/logo.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>最近在测试SteamAPI Client，不得不吐槽一下steam提供的web接口返回的响应结构真是<strong>多种多样</strong>，可以看的出来都是陈年老项目了。不过重点不是这个，虽然Steam的游戏服务在国内不需要梯子也可以访问，但是他们提供的接口如果不走代理的话，那基本上请求十次八次超时，为了解决这个问题只好在测试机上弄clash。</p>
<p>clash是用go编写的，一大好处就是安装非常方便，因为除了一个二进制文件其它什么都不需要，并且还是开源跨平台的。</p>
<h2> 安装</h2>
<p>开源地址：<a href="https://github.com/Dreamacro/clash" target="_blank" rel="noopener noreferrer">Dreamacro/clash: A rule-based tunnel in Go. (github.com)</a></p>
<p>从release中找到最新版，然后找到对应的版本。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309141836378.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>wget下载到本地</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>gzip解压</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了方便使用将其链接到bin目录下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完事后查看版本，输出没问题就是安装成功了</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 代理</h2>
<p>导入配置文件，clash的配置文件相当复杂，一般你的代理服务商都会提供现有的配置以供导入，比如我使用的glados</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后启动clash，指定配置文件和路径，<code>-d</code>指的是配置目录，clash在刚开始时会尝试下载country.db如果不存在的话。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有如下输出即可</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到http代理端口<code>7890</code>，由于socks不需要就不配置。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置生效前来看看请求steamapi是什么效果，可以看到失败了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在开启clash后</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>clash日志这里也有输出，是走了代理的</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有需求的话，可以做成系统服务，进行更加方便的管理。</p>
]]></content:encoded>
      <enclosure url="https://github.com/Dreamacro/clash/raw/master/docs/logo.png" type="image/png"/>
    </item>
    <item>
      <title>记一次服务器被黑的解决过程</title>
      <link>https://246859.github.io/my-blog-giscus/posts/problem/hack.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/problem/hack.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">记一次服务器被黑的解决过程</source>
      <description>记一次服务器被黑的解决过程 只能说离谱，以后还是要多注意这方面的东西。</description>
      <category>问题记录</category>
      <pubDate>Tue, 12 Sep 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 记一次服务器被黑的解决过程</h1>
<p>只能说离谱，以后还是要多注意这方面的东西。</p>
<!-- more -->
<hr>
<p>一大早起来，就看到腾讯云异常登录的通知，就大概明白是咋回事了，这是我在腾讯云上的一个轻量应用服务器，倒也算不上第一次被黑，上一次被黑的时候入侵者仅仅只是放了一个挖矿木马就没了，其它什么也没动。这一次不仅搞挖矿把服务器资源都跑满了，而且还把我root用户的ssh密钥都改了，一大早起来就得赶紧解决。这里放一张图，看看资源使用情况，基本上都已经爆满了。</p>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309120816314.png" style="zoom: 80%;">
<h2> 原因</h2>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309120919508.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>究其原因，是因为在前几天为了在服务器上搭建自用的gitea，创建了一个新用户<code>git</code>来跑服务，也就是此次异常登录的用户，当时给它添加到了sudo组，而且也忘记做远程登录限制，也没有ssh密钥，密码也是非常简单的<code>123456</code>，被暴力破解应该是轻而易举的，只是没想到睡一觉起来就G了，以后在这一块看来是一点都不能松懈。下面是截取的一部分登录尝试记录。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 解决</h2>
<p>首先是之前的用户都登陆不上去了，这里只能用服务器默认用户在腾讯云后台重置密码，密码重置完后，登陆到服务器上，top看一下</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309120850327.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>可以看到第一行xrx这个东西已经把cpu跑满了，内存也没剩下多少并且还多了一个cheeki用户。然后来看看这个玩意的运行路径</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再locate一下看看</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中这个<code>ini.sh</code>应该是被混淆过的，全是乱码，key文件和passwd可能是用来解码的。此时看下git用户的<code>.bash_history</code>都是我自己留下的记录，操作记录也是可以被隐藏的。目前root目录我是进不去的，直接把这个进程kill了也无济于事，一般来说会有定时任务来定时重启这些木马，查看系统定时任务，差不多就是特定的地方拉取脚本然后执行，并且在重启的时候还会后台运行这几个进程。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到该文件修改时间就是凌晨一点，差不多就是我在睡觉的时候。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>差不多在同一时间，<code>/etc/passwd</code>文件也被修改了。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不幸的是，passwd命令也被掉包了，即便通过root权限，也无法直接修改用户的密码，而且我修改的密码可能会通过网络被上传到后台。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>把盗版的passwd先删掉，然后用apt重新安装一个</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>后面的任务是拿到root账号，这里通过腾讯云后台提供的重置密码功能，把root账号的密码给重置了，然后用默认账户登录上去再切换到root，可以看到密钥已经被改了，修改时间也是凌晨</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且还上锁了，无法删除</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试解锁后成功了，庆幸没有对方修改chattr命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把所有密钥都删除，然后再删除木马文件和定时任务，然后再重启看看，是否恢复正常。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除之后的话基本上服务器占用就变正常了，为了彻底解决，这里把ssh的配置设置的更加严格一些，禁止密码登录，禁止root登录，修改ssh默认端口号。差不多后续就不会出什么问题了，除非有什么其它软件漏洞。下面是修改后的占用图，就是正常状态了。</p>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309121531013.png" style="zoom:80%;">
<p>下面是一些用到的文章</p>
<ul>
<li>
<p><a href="https://cloud.tencent.com/developer/article/1026521?areaId=106001" target="_blank" rel="noopener noreferrer">Linux系统是否被植入木马的排查流程梳理-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
</li>
<li>
<p><a href="https://cloud.tencent.com/developer/article/1828412" target="_blank" rel="noopener noreferrer">Linux服务器被黑 排查思路(上)-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309120919508.png" type="image/png"/>
    </item>
    <item>
      <title>记一次Redis线上数据突然丢失的问题</title>
      <link>https://246859.github.io/my-blog-giscus/posts/problem/redisdataloss.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/problem/redisdataloss.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">记一次Redis线上数据突然丢失的问题</source>
      <description>记一次Redis线上数据突然丢失的问题</description>
      <category>问题记录</category>
      <pubDate>Sat, 22 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 记一次Redis线上数据突然丢失的问题</h1>
<!-- more -->
<hr>
<p>之前的项目用到了redis来存放一些游戏的模组信息以及一些非结构化配置，突然有一次甲方告诉我系统出问题了，我一去看发现redis里面的数据全没了，由于redis没有开启日志，一时半会排查不出来是什么问题。就把redis aof备份粒度做的更细了一些，暂时想到的可能是RDB跟AOF覆盖掉了，但是这种情况应该非常小，事后还做好了日志方便下次排查，弄好之后这件事就这么过去了，</p>
<p>直到两个星期后，又发生了这个问题，查看到系统日志是下午15:26:51发生的问题，对比redis日志，刚开始还是一些正常的备份信息，像下面这样</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到出问题的时间点的时候就发现不对劲了，</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尤其是这一段<code>Connecting to MASTER 35.158.95.21:60107</code>，这个IP并不是甲方的IP，并且系统是单机应用，redis都是直接和后端部署在同一个物理机上的，并没有采用redis集群和主从复制。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复制master数据后，我们的数据就没了，然后备份过后redis数据也没了。多半是redis密码太简单导致的问题，于是修改密码后再看后续的情况。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Flutter在windows桌面软件开发</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/fluttertry.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/fluttertry.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Flutter在windows桌面软件开发</source>
      <description>Flutter在windows桌面软件开发</description>
      <category>技术日志</category>
      <pubDate>Sat, 29 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Flutter在windows桌面软件开发</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307291114364.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>最近打算试一试桌面软件的开发，苦于没有QT基础，并且go的GUI生态太拉跨了。后来在网上了解到Flutter，现在已经可以稳定开发windows桌面软件了，结合Dart进行开发，而且性能相当的可以，于是本文记录一下flutter的尝试。</p>
<p>Flutter官网：<a href="https://flutter.cn/" target="_blank" rel="noopener noreferrer">Flutter: 为所有屏幕创造精彩 - Flutter 中文开发者网站 - Flutter</a></p>
<p>Flutter文档：<a href="https://flutter.cn/docs" target="_blank" rel="noopener noreferrer">Flutter 开发文档 - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></p>
<p>Flutter安装：<a href="https://flutter.cn/docs/get-started/install" target="_blank" rel="noopener noreferrer">安装和环境配置 - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></p>
<h2> 安装</h2>
<p>第一件事是下载flutter，由于是谷歌开源的，部分网页需要魔法上网。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307291155426.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>下载下来后就是一个压缩包，Flutter SDK是包含了完整的Dart SDK，解压到自己想要的位置后将bin目录添加到系统变量中。</p>
<h2> 换源</h2>
<p>安装完成后，需要配置一下镜像源，因为flutter服务需要下载一些东西，默认配置的话国内网络多半是下载不了的。</p>
<p>清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/flutter/" target="_blank" rel="noopener noreferrer">flutter | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>
<p>可以使用清华镜像源，将以下几个替换掉</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者也可以手动去设置上面三个环境变量。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>其他一些可用的镜像站点：<a href="https://flutter.cn/community/china#%E7%A4%BE%E5%8C%BA%E8%BF%90%E8%A1%8C%E7%9A%84%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9" target="_blank" rel="noopener noreferrer">在中国网络环境下使用 Flutter - Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></p>
</div>
<h2> 检查依赖</h2>
<p>Flutter的跨平台构建应用是需要依赖其他的一些软件的，windows桌面软件开发需要依赖微软的vs，app的话需要Android Studio，这里只安装vs。</p>
<p>vs安装：<a href="https://learn.microsoft.com/zh-cn/visualstudio/install/install-visual-studio?view=vs-2022" target="_blank" rel="noopener noreferrer">安装 Visual Studio | Microsoft Learn</a></p>
<p>vs安装好后，执行</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我并没有安装安卓工具链，这里安装的是最新版flutter 3.10.6，正式版从2.0开始就稳定支持windows了。</p>
<h2> Hello World</h2>
<p>使用命令创建项目，过程中需要下载东西，要等一会儿，如果前面的镜像配置好了的话是不需要等多久的。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后运行demo</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选择要运行的类型</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有web和windows可选，都可以试一试</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307291234496.png" alt="windows桌面软件" tabindex="0" loading="lazy"><figcaption>windows桌面软件</figcaption></figure>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307291235487.png" alt="web" tabindex="0" loading="lazy"><figcaption>web</figcaption></figure>
<h2> 体验</h2>
<p>整个过程的初体验还是很不错的，没有深入了解的情况下不太好评价其他地方。在打开web的时候发现整个界面不是传统的html元素，相当于是flutter自己渲染的一套canvas，只能说有点东西。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307291238083.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>等到后面学习的足够深入了再回头做一个系统点的评价。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307291114364.png" type="image/png"/>
    </item>
    <item>
      <title>Dstm项目完结</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/dstm.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/dstm.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Dstm项目完结</source>
      <description>Dstm项目完结</description>
      <category>技术日志</category>
      <pubDate>Sat, 08 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Dstm项目完结</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307081548886.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<p>Dstm全名Don’t Starve Together Manager，中文名饥荒联机版控制面板，基于docker实现，这个项目所有的内容由我独自一人完成，前前后后总共花费了接近三个月的时间，虽然钱有点少，但是收获还是蛮多的，于是写了这一篇文章记录一下。</p>
<h2> 历程</h2>
<p>这个项目只是我在在校个人接的一个项目，所以没有严格的什么招标投标的流程。甲方是一个体量不算大的云服务商（注册资金100万左右），以前在他们那边买过云服务器，他们主营业务是《我的世界》面板服务器和VPS，本人也算是他们的一个老客户了。4月初的时候来找我谈这个项目，想要拓展饥荒这款游戏的业务，最初提出的是想要做一款类似翼龙的面板，由于老板本身不了解技术，需求提的很模糊（让我明白沟通的重要性），并且我对于这款游戏也是没有任何游玩经验，4月份大部分时间都是在熟悉游戏相关的内容以及模组拓展部分，并且花了两个星期写了一个前端的demo展示给甲方看，这之后才正式谈妥。4月末5月初算是真正明确了项目的方向，最开始前端挑选了一个相当优秀的开源脚手架（Vben），内置了丰富的功能和组件，让我节省了大量的时间和精力，让我能够专注于后端代码的编写，后端项目是完全从零开始的，没有用其他的脚手架，所以花费的时间会更多一些，难度自然也就更大。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307081635524.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>对于前端而言，虽然我主要学习方向是后端，以前多多少少学过前端的内容，虽然界面做出来算不上多美观，但是至少界面简洁，功能正常。以前在编写mc插件的时候用的最多的就是js，有着脚手架的加持和开源的UI组件库，对我而言整个前端开发的过程并没有遇到太大的阻挠。</p>
<p>后端是这个项目难度最大的点，面板需要管理一群docker虚拟容器，此前对于docker还仅停留在使用的程度，这是我从未接触过的领域，并且还要熟悉饥荒这款游戏的内容，模组，脚本等等，饥荒的游戏脚本大部分都是由lua编写的（还好以前了解过）。面对一堆的陌生的内容，在初期可以说是花费了大量的时间去查资料和学习（不得不感慨中文互联网信息实在太匮乏了），docker这部分有docker官方提供的Docker Engine API，饥荒这部分的资料来源是克雷官方的fortum论坛和百度贴吧论坛（贴吧老哥是真的强），以及一些饥荒有关的开源项目（感谢开源）。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307081636532.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>到了写这篇文章的时候，项目功能已经全部完成，总计125个接口，只剩下最后的一点测试。一路过来也是挺不容易的，在推进项目的过程中还要兼容学校的课程，期末了还要考试，不过到最后还是在暑假初期结束这个项目。</p>
<h2> 技术栈</h2>
<p>项目本身是前后端分离的，前端主要采用的vue3框架，后端采用go作为开发语言。</p>
<h3> 结构</h3>
<figure><img src="https://apifox.com/api/v1/projects/2672982/resources/388681/image-preview" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> 前端</h3>
<ul>
<li>框架：Vue3</li>
<li>构建工具：Vite</li>
<li>开发语言：TypeScript</li>
<li>脚手架：Vben-amdin <a href="https://github.com/vbenjs/vue-vben-admin" target="_blank" rel="noopener noreferrer">Github 开源地址</a></li>
<li>Ajax：Axios</li>
<li>状态管理：pinia</li>
<li>路由：Vue-Router-Next</li>
<li>UI组件库：Ant-Design-Vue</li>
</ul>
<h3> 后端</h3>
<ul>
<li>开发语言：Go 1.20.2</li>
<li>Http框架：Gin</li>
<li>数据库：Mysql，Redis</li>
<li>ORM：GORM</li>
<li>认证：JWT</li>
<li>配置管理：viper</li>
<li>权限管理：casbin</li>
<li>日志框架：zap</li>
<li>定时任务：robfig/cron</li>
</ul>
<h3> 数据库</h3>
<p>mysql主要是用于存放一些结构化的信息，例如api权限表，用户信息，实例信息，策略信息以及端口映射等等，这个项目的表结构并不复杂，就七张表，</p>
<p>因为大部分信息都是直接从dockerapi中读取的，系统本身并不需要存放什么过多的数据。</p>
<p>redis主要用于存放一些非结构化的信息，系统分发的token和密钥，用于主动过期处理，另外还会存放每一个实例的模组下载信息，以及系统设置。redis数据格式相对mysql而言较为松散，没有那么严格的结构，项目均是采用json格式存放的redis数据。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307081658970.png" alt="测试服的界面" tabindex="0" loading="lazy"><figcaption>测试服的界面</figcaption></figure>
<h2> 主要难点</h2>
<p>下面这些难点是困扰我比较久的，虽然每一个点描述的比较少，但实际上为了解决它们，我花费了相当多的时间去试错和测试。</p>
<h3> 实例资源限制</h3>
<p>容器即实例，资源限制这一块是docker利用docker提供的支持，在最开始了解时，发现有两种方法，一种是使用devicemapper驱动的LVM，另一种是使用overlay2驱动的xfs文件系统的quota功能。项目选择了devicemapper，因为了解的早一些，不过docker官方在后续版本声明devicemapper驱动可能会停止维护了。</p>
<h3> 创意工坊模组</h3>
<p>模组是这个游戏相当重要的一块功能，这部分主要是借助steamcmd和SteamWebApi来解决的，一部分模组会直接提供url以供下载，另一部分则需要使用steamcmd来进行下载。</p>
<h3> 模组信息解析</h3>
<p>饥荒的模组都是由lua脚本编写的，项目采用了一个开源的由go编写的lua虚拟机，通过lua虚拟机来解析模组信息，将lua信息解析成go对象。</p>
<h3> 世界设置解析</h3>
<p>这一部分应该算得上是最繁杂的了，最初想的是一个个手动维护配置项，但是多大两百个的配置项让人望而却步。后来需要去读取游戏文件的中的tex文件，将其转换成图片格式的文件，然后再读取游戏脚本以获取文本翻译和世界配置的每一个配置项。</p>
<h3> 服务端管理</h3>
<p>一个饥荒服务器有两个服务端，地面服务端与洞穴服务端，使用screen进行管理，通过将预先编写好的管理脚本打包到镜像中，后续的管理就变得相当方便。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202307081548886.png" type="image/png"/>
    </item>
    <item>
      <title>go后端日期时区的问题记录</title>
      <link>https://246859.github.io/my-blog-giscus/posts/problem/gotime.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/problem/gotime.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">go后端日期时区的问题记录</source>
      <description>go后端日期时区的问题记录 记录一次go后端日期时区问题的记录</description>
      <category>问题记录</category>
      <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> go后端日期时区的问题记录</h1>
<p>记录一次go后端日期时区问题的记录</p>
<!-- more -->
<hr>
<p>在通常的前后端交互中，日期是一个经常很令人头痛的问题，需要统一格式，统一时区等等。</p>
<p>在最近的一个项目中，前端根据<code>YYYY/MM/DD hh:mm:ss</code>格式传给后端，后端解析成<code>time.Time</code>类型，但是这犯了一个很严重的错误。</p>
<p>在解析日期字符串时，如果没有按照格式传递时区偏移，例如<code>+0800 CST</code> 等格式，go将会默认解析为<code>+0000 UST</code>的时区，由于数据库设置为了同步设置了东八区，一看传过来的数据是UST时区的，就误认为需要修正时区，结果就是存储到数据库的数据会比实际时间多出八小时。</p>
<p>解决办法1：</p>
<p>前端在传递给后端日期时，前端自己带上时区信息，<code>+0800 CST</code>类似这种</p>
<p>解决办法2：</p>
<p>后端根据客户端请求头中的时区信息， 将传递过来的日期加上时区信息</p>
<p>当添加上正确的时区信息过后，时间的读写才会是正常的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>docker安装mysql和redis</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/docker_mysql.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/docker_mysql.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">docker安装mysql和redis</source>
      <description>docker安装mysql和redis</description>
      <category>技术日志</category>
      <pubDate>Thu, 29 Jun 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> docker安装mysql和redis</h1>
<figure><img src="https://w.wallhaven.cc/full/ex/wallhaven-ex9gwo.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<!-- more -->
<hr>
<h4> Mysql</h4>
<p>首先拉取mysql的镜像，要确保major版本是8，例如8.0.33</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里要创建mysql的挂载文件夹，以防数据丢失，这里放在<code>/root/mysql</code>路径下为例子</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随后在<code>/root/mysql/confg/</code>目录下创建<code>my.cnf</code>文件，内容如下</p>
<div class="language-ini line-numbers-mode" data-ext="ini"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行如下命令启动容器即可，下面分别创建了mysql日志，mysql数据库，mysql配置的挂载数据卷，这里的<code>MYSQL_ROOT_PASSWORD=123456</code>就是数据库的root密码，可以自己改成其他的，环境变量<code>MYSQL_DATABASE=dst</code>会自动创建一个名为dst的数据库，按需修改。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完成后登录mysql看看成功没有</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到有dst数据库就说明mysql成功安装.</p>
<p>到此安装成功，然后记录下数据库的密码，后面后端会用到。</p>
<h4> Redis</h4>
<p>首先拉取redis镜像，保证redis版本在6以上</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建redis的挂载目录</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入<code>~/redis/</code>目录，创建配置文件<code>redis.conf</code>，内容如下，密码自己定。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行容器</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis默认不允许远程访问，所以需要额外配置，修改配置文件如下</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis各版本配置文件：<a href="https://redis.io/docs/management/config/" target="_blank" rel="noopener noreferrer">Redis configuration | Redis</a></p>
]]></content:encoded>
      <enclosure url="https://w.wallhaven.cc/full/ex/wallhaven-ex9gwo.png" type="image/png"/>
    </item>
    <item>
      <title>Docker安装nginx</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/docker_nginx.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/docker_nginx.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Docker安装nginx</source>
      <description>Docker安装nginx docker安装nginx</description>
      <category>技术日志</category>
      <pubDate>Thu, 29 Jun 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker安装nginx</h1>
<figure><img src="https://w.wallhaven.cc/full/zy/wallhaven-zyxvqy.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>docker安装nginx</p>
<!-- more -->
<hr>
<p>Docker安装nginx时一般都是直接使用命令</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但后来还是觉得直接把静态文件打包进镜像可能会更加方便些</p>
<div class="language-docker line-numbers-mode" data-ext="docker"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行命令</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目录下的html是打包好的静态文件，nginx是nginx配置文件夹。</p>
]]></content:encoded>
      <enclosure url="https://w.wallhaven.cc/full/zy/wallhaven-zyxvqy.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>docker内存显示异常的bug</title>
      <link>https://246859.github.io/my-blog-giscus/posts/problem/dockermem.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/problem/dockermem.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">docker内存显示异常的bug</source>
      <description>docker内存显示异常的bug 源于项目开发过程中的一个发现</description>
      <category>问题记录</category>
      <pubDate>Thu, 29 Jun 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> docker内存显示异常的bug</h1>
<p>源于项目开发过程中的一个发现</p>
<!-- more -->
<hr>
<p>此前接了一个开发饥荒虚拟容器管理平台的项目，其中有一个功能就是实时显示容器的内存使用状况，后来奇怪的发现容器的内存趋势图在容器创建后的5分钟内达到了几乎100%</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202306292022189.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>初次遇到这个问题，百思不得其解，以为是自己程序的编写错误，后来在容器中<code>top</code>了一下发现真实占用可能就40%左右。后面去翻阅了docker cli计算内存占用的源代码，<a href="https://github.com/moby/moby/blob/eb131c5383db8cac633919f82abad86c99bffbe5/cli/command/container/stats_helpers.go#LL110C62-L110C62" target="_blank" rel="noopener noreferrer">Docker Cli 计算内存源代码地址</a>，逻辑基本上是一致，那么只剩一种可能，这的确就是docker的bug。</p>
<p>在经过测试后，这个bug诱发的原因是饥荒容器在创建时会下载一个接近4个g的游戏服务端，在此过程中会消耗一定的资源，内存占用会逐渐攀升，但是等到下载完毕后增长的趋势依旧不停，从而造成了内存虚高。</p>
<p>为此编写了一个测试，这在github的issue里有更详细的介绍，<a href="https://github.com/moby/moby/issues/45727" target="_blank" rel="noopener noreferrer">issue address</a></p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202306292022189.png" type="image/png"/>
    </item>
    <item>
      <title>Docker容器磁盘热扩容</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/expand.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/expand.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Docker容器磁盘热扩容</source>
      <description>Docker容器磁盘热扩容 本文主要讲解Docker容器磁盘热扩容，不需要重启docker服务，也不需要重启容器</description>
      <category>技术日志</category>
      <pubDate>Sat, 20 May 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Docker容器磁盘热扩容</h1>
<figure><img src="https://w.wallhaven.cc/full/9m/wallhaven-9mjoy1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>本文主要讲解Docker容器磁盘热扩容，不需要重启docker服务，也不需要重启容器</p>
<!-- more -->
<hr>
<p>最近项目里的需求需要实现Docker容器的热扩容，前一阵子给Docker驱动换到了<code>devicemapper</code>，对容器的资源限制可以更加精确和友好，刚好记录一下整个过程。</p>
<h2> 环境准备</h2>
<p>系统：ubuntu22.04LTS</p>
<p>Docker：24.00</p>
<p>Go版本：1.20.4</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开始之前你需要确保Docker驱动是<code>devicemapper</code>，并且宿主机和Docker的文件系统是<code>ext4</code></p>
</div>
<h2> 查看容器大小</h2>
<p>这里拿一个nginx容器做实验，先进入容器查看一下大小，一般在创建容器时若不指定默认大小为10G。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到rootfs的size是11G，并且文件系统类型是<code>ext4</code>，这里需要将<code>/dev/mapper/docker-8:3-2097855-40ca4227a94fe9cd1dc00963961cc16c8fc0bd6d650e72cfc0c10bc34a9c08f6</code>记下来，后续操作会用到。</p>
<h2> 准备扩容</h2>
<p>这时回到宿主机，查看之前复制的文件系统名占用的磁盘扇区数</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到扇区数是从0到20971520，假设要扩容到20G，需要的扇区数就是<code>20*1024*1024*1024/512=41943040</code>，然后再修改表</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重载一下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次查看扇区数</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到扇区已经变成了41943040，最后需要调整文件系统的大小</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 确认大小</h2>
<p>再次进入容器查看</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到确实变成了20G。</p>
]]></content:encoded>
      <enclosure url="https://w.wallhaven.cc/full/9m/wallhaven-9mjoy1.png" type="image/png"/>
    </item>
    <item>
      <title>Goland远程开发与远程调试</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/remotedev.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/remotedev.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Goland远程开发与远程调试</source>
      <description>Goland远程开发与远程调试 本文讲解了如何使用Goland的远程开发和远程调试功能</description>
      <category>技术日志</category>
      <pubDate>Mon, 15 May 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Goland远程开发与远程调试</h1>
<figure><img src="https://w.wallhaven.cc/full/j3/wallhaven-j35ev5.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>本文讲解了如何使用Goland的远程开发和远程调试功能</p>
<!-- more -->
<hr>
<p>最近的一个项目是要部署在Linux上运行，但我习惯了在Windows上进行开发，许多开发工具都是在Windows上，所以远程开发和远程调试非常有必要，代码依旧在本地写，只是编译和部署放在Linux上。先说一下我的环境：</p>
<p>本地环境：Windows10，go1.20.2 dlv1.20.2</p>
<p>远程环境：ubuntu20LTS（虚拟机），go1.20.4，dlv1.20.2</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>虽然本文Linux用的是虚拟机，但是放在云服务器上一样使用。</p>
</div>
<h2> Go Build 配置</h2>
<p>首先在Goland运行配置里新建一个Go Build配置，然后选择Run On SSH</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202305151710958.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>输入Host和要登录的用户名</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202305151711615.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>登录成功后Goland会尝试执行<code>which go</code>命令，也许会失败，不过这并不影响，后面自己指定就行。再然后才是远程开发的重要配置</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202305151714447.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ul>
<li><code>Project path on target</code>：该目录是后续操作的项目根目录，后续Goland自动上传的文件都会位于该目录下</li>
<li><code>Go Executable</code>：go二进制文件，该二进制文件并不是自己项目的二进制文件，而是go源代码的二进制文件，通常位于<code>$GOROOT/bin/</code>目录下</li>
<li><code>GOPATH</code>：不需要多做解释</li>
<li><code>Project sources directory</code>：Goland在编译时会先将源码上传到远程服务器上，该目录就是源码的指定位置，如果不填的话就会在项目根目录下随机生成目录，看起来很烦。</li>
<li><code>Compiled exectuables directory</code>：编译完成后二进制文件存放的文件夹。</li>
</ul>
<p>完成后如下</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202305151720594.png" alt="image-20230515172036551" tabindex="0" loading="lazy"><figcaption>image-20230515172036551</figcaption></figure>
<p>然后再Go Build中记得勾选 <code>Build on remote target</code>，这样上面的配置才会生效</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202305151723033.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> Go Remote配置</h2>
<p>在运行配置中新建Go Remote</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202305151725871.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>然后填写你的调试服务器IP和端口</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202305151725949.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>调试服务器就是dlv，如果在远程服务器中已经安装好了go环境，直接执行以下命令即可安装dlv</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用dlv命令运行调试服务器</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每一个参数是什么作用可以在github上了解，exec参数后跟二进制文件的路径</p>
<h2> 开发流程</h2>
<p>上述所有配置完毕后，开发流程就是：</p>
<ol>
<li>本地编写代码</li>
<li>Goland更新远程服务器的源代码并编译</li>
<li>运行dlv调试服务器</li>
<li>本地运行Go Remote进行调试</li>
</ol>
<p>这样一来远程开发和远程调试的问题就都解决了，非常nice，远程调试起来也跟本地调试几乎没什么区别。</p>
]]></content:encoded>
      <enclosure url="https://w.wallhaven.cc/full/j3/wallhaven-j35ev5.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>64位Ubuntu上运行32位可执行文件</title>
      <link>https://246859.github.io/my-blog-giscus/posts/problem/linuxexe.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/problem/linuxexe.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">64位Ubuntu上运行32位可执行文件</source>
      <description>64位Ubuntu上运行32位可执行文件 记录64位Ubuntu上运行32位可执行文件的问题</description>
      <category>问题记录</category>
      <pubDate>Sat, 08 Apr 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 64位Ubuntu上运行32位可执行文件</h1>
<p>记录64位Ubuntu上运行32位可执行文件的问题</p>
<!-- more -->
<hr>
<p>最近在捣鼓Steamcmd开游戏专用服务器，下载下来的tar包中，解压出来的steamcmd可执行文件是32位的，命令如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当时的使用系统uname如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>64位系统是无法直接运行32位可执行文件的，最开始半天不知道怎么回事，一直报<code>No such file and directory</code>，发现问题后下载32位依赖运行库即可</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载完成后即可正常运行。</p>
]]></content:encoded>
    </item>
    <item>
      <title>在Linux搭建DST专用服务器</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/dst.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/dst.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">在Linux搭建DST专用服务器</source>
      <description>在Linux搭建DST专用服务器 本文主要讲解了如何在Linux环境下搭建Dont Starve Together的专用服务器，以及一些坑。</description>
      <category>技术日志</category>
      <pubDate>Sun, 09 Apr 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 在Linux搭建DST专用服务器</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304091448764.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>本文主要讲解了如何在Linux环境下搭建Dont Starve Together的专用服务器，以及一些坑。</p>
<!-- more -->
<hr>
<h2> 环境准备</h2>
<p>在开始之前需要准备以下东西：</p>
<ul>
<li>一台装了Linux系统的云服务器，本文使用的是Ubuntu20LTS。</li>
<li>SSH客户端，本文使用的XShell</li>
<li>SFTP客户端，本文使用的是FillZilla</li>
</ul>
<p>云服务器安全组要放行10800到12000范围端口，饥荒服务端差不多都在这个范围内，协议使用UDP。</p>
<h2> 创建用户</h2>
<p>与服务器进行ssh连接过后，创建一个专门用于DST管理的用户，这样与系统隔离，方便后续管理。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后进入dst的ssh目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成ssh密钥对，将公钥注册到服务器中</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>把私钥保存下来这样后续就可以使用ssh私钥进行登录。</p>
<h2> 依赖准备</h2>
<p>首先首先要给软件管理工具加一个i386的架构，有warning忽略掉，然后看看加进去没有</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再下载所需要的32位依赖</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述依赖是必须安装的，否则在运行可执行文件时会报错无法找到文件。</p>
<h2> 安装SteamCMD</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>如何在Linux上安装SteamCMD官方有非常详细的中文教程，<a href="https://developer.valvesoftware.com/wiki/SteamCMD:zh-cn" target="_blank" rel="noopener noreferrer">Steam 控制台客户端 - Valve Developer Community (valvesoftware.com)</a></p>
</div>
<p>先切换到dst用户</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后下载SteamCMD压缩包</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将其解压到steam目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后进入steam目录执行steamcmd.sh脚本启动进行安装</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者也可以直接下载软件包，然后再启动steamcmd</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>等待安装完成后在steamcmd里面执行如下命令来设置安装目录</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>需要注意的是设置安装目录必须在登录之前操作，登陆后不能再修改该项</p>
</div>
<p>然后再登录steam，一般使用匿名登录。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待登录完成后下载饥荒服务端，343050是它的appid，这里大概要等个几分钟，下载完毕后先退出。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到server目录下看看是不是安装到指定目录了，如下就说明安装成功了</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 开服</h2>
<p>前往克雷官网，登录并注册申请服务器token</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304092018313.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>点击添加新的服务器</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304092018095.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>完成后点击下载设置，使用sftp将该文件夹传入<code>/home/dst/.klei/DoNotStarveTogether</code>目录下，这是默认的存档位置，没有这个文件夹就自行创建该文件夹。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304092020790.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>然后需要下载一个多终端管理工具screen</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在<code>/home/dst</code>目录下创建<code>master.sh</code>和<code>caves.sh</code>，内容如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后运行脚本即可，如下</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304092026834.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>当两个maser终端和caves终端都输出sim paused时，说明开服成功，进入游戏在搜索你设置的服务器名称</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304092028986.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>能够搜索到并成功进入服务器，说明服务器搭建完毕。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304091448764.png" type="image/png"/>
    </item>
    <item>
      <title>Unicode字符集及其编码实现</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/unicode.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/unicode.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Unicode字符集及其编码实现</source>
      <description>Unicode字符集及其编码实现 本文主要介绍Unicode字符集和它的几个实现UTF-8，UTF-16，UTF-32</description>
      <category>技术日志</category>
      <pubDate>Thu, 06 Apr 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Unicode字符集及其编码实现</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304061406979.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>本文主要介绍Unicode字符集和它的几个实现UTF-8，UTF-16，UTF-32</p>
<!-- more -->
<hr>
<p>在日常的写代码过程中，想必或多或少都跟Unicode打过交道，UTF-8，ISO-8859-1，UTF-16等编码出现的次数相当多，例如项目中的配置文件的编码问题，一个人打开可以正常查看并写入了配置，而另一个人打开后看到的就全是乱码，这种问题实际上也只是编码不同而造成的问题类型之一，为了能更好的去解决这类问题，所以就有必要了解相关知识。</p>
<h2> 基本概念</h2>
<p>在了解本文的内容之前，以下基本概念需要了解。</p>
<h3> 字节</h3>
<p>一个字节占八个比特位，它是字符大小的基本单位。</p>
<h3> 字符</h3>
<p>字符（character），在计算机科学中，一个字符是一个单位的字形，类字形单位或符号的基本信息，可以理解为各种文字和符号的总称。它可以是中文汉字：你，也可以是英文字母：Y，或者是一个标点符号：！，还可以是一个emoji表情：🥙，以及一些不可见的控制符号。不同类型的字符在计算机存储中占用的大小可能会有所不同，比如一个英文字符通常只占用一个字节，但是一个中文字符通常占用三个字节。</p>
<h3> 字符集</h3>
<p>字符集（character set），指某一类字符的集合。字符集会收录某一类特定的字符，比如GB2312字符集是中国国家标准总局发布的，它收录了共7445个字符，其中有六千多个汉字。不同的字符集包含的字符类型不同，在计算机上的编码方式也不同，不过具体的编码方式并不由字符集来指定和实现，字符集的作用是收录字符而不是对字符进行编码。常见的字符集有ASCII字符集，Big5字符集，Unicode字符集。</p>
<h3> 字符编码</h3>
<p>字符编码（character encoding），字符编码就是字符映射规则。众所周知计算机只认识0和1，那么一个字符最终还是要被转换成二进制形式才能方便计算机存储和传输，字符编码要干的就是将字符以某种规则转换成计算机可以理解的二进制形式。最常见和最简单的字符编码就是ASCII编码，它规定用一个字节的低七位去编码字符，例如小写字母a的经过ASCII编码后的二进制形式就是<code>01100001</code>，十进制形式就是97。一般来说，一个字符集可能会有多种编码规则，不同的字符集拥有不同的编码规则。如果一个文本文件是用UTF-8进行编码的，那么在解码的时候就也应该使用UTF-8的规则，如果使用了GBK或者Big5编码的规则进行解码，就只会得到一串人类无法阅读的乱码。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>大部分的编码都兼容ASCII字符集，不过也有少部分不兼容，比如UTF-16编码，UTF-32编码。</p>
</div>
<h3> 编码空间</h3>
<p>编码空间（encoding space）或者又叫码位空间，简单说就是包含所有字符的表的维度。比如说GB2312的编码空间是94x94，因为它总共就只有94x94个码位。同理ISO8859-1有256个码位，所以它的编码空间是256，也可以说是8比特。其实它的表示方式有很多种，总的来说都是在表达字符集所能容纳的字符数量。</p>
<h3> 码点</h3>
<p>码点（code point）又称码位，指的是编码空间中的一个位置。对于一个字符而言，它在编码空间也就是字符集中所占用的码位叫码位值（有点拗口，其实两个都是一个概念）。码位值是可查的，例如在Unicode字符集中，汉字“中”的码点就是U+4E2D。</p>
<br>
<h2> ASCII</h2>
<p>ASCII（American Standard Code for Information Interchange，美国信息互换标准编码）是基于罗马字母表的一套字符集，发布于1967年，因为美国的主流语言是英语，ASCII字符集所包含的字符也只有英文字符，它总共有128个字符。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304061632282.png" alt="ASCII字符集的一部分" tabindex="0" loading="lazy"><figcaption>ASCII字符集的一部分</figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>如果想要查看更完整的ASCII字符集可以前往<a href="https://ascii.org.cn/" target="_blank" rel="noopener noreferrer">ASCII码对照表</a></p>
</div>
<p>ASCII采用的是单字节来表示字符，一个字节有八位，ASCII只有128个字符也就是2的7次方，相当于八位里面只有七位是有用的，所以在ASCII二进制形式中最高位默认为0，就比如第一个字符是空字符它的二进制形式是<code>0000 0000</code>，第128个字符是DEL字符，二进制形式是<code>0111 1111</code>。计算机起源于美国，早期只有美国科学家在使用这些，足够满足他们的使用。</p>
<p>随着计算机技术的不断发展，世界上的各个国家都引进了计算机，ASCII的局限性就体现出来了，世界上的国家有非常多，有些国家使用的语言甚至不止一种。ASCII所包含的字符总共只有128个，肯定是无法表达所有的语言的，于是欧洲将ASCII中字符闲置的最高位利用起来，对ASCII进行了拓展到了256个字符，称为EASCII（Extend ASCII），但其实256个字符也不足以统一整个欧洲的语言字符。</p>
<p>于是后来规定，将这256个字符中的前128个字符用于收录ASCII中的字符，也就说前128个字符与ASCII完全一致，而后128个字符根据欧洲不同的地区而收录不同的字符，这就是后来的ISO 8859系列标准（<a href="https://en.wikipedia.org/wiki/ISO/IEC_8859" target="_blank" rel="noopener noreferrer">ISO/IEC 8859</a>），下面列出一小部分：</p>
<ul>
<li>
<p>ISO8859-1 字符集，也就是 Latin-1，收集了西欧字符。</p>
</li>
<li>
<p>ISO8859-2 字符集，也称为 Latin-2，收集了东欧字符。</p>
</li>
<li>
<p>ISO8859-3 字符集，也称为 Latin-3，收集了南欧字符。</p>
</li>
<li>
<p>ISO8859-4 字符集，也称为 Latin-4，收集了北欧字符。</p>
</li>
</ul>
<p>这样改进了后，欧洲不同地区使用不同的字符集，就可以满足使用了，但是这也仅仅只是满足欧洲语言体系的使用而已，要知道光是中文汉字的数量都有十万多个，于是就有了下面要讲的汉字字符集。</p>
<h2> 汉字字符集</h2>
<p>汉字字符集中，简体字符集中有国标系列字符集，繁体字符集有Big5。</p>
<h3> GB2312</h3>
<p>GB，就是”国标“的拼音GuoBiao的首字母。GB2312编码是第一个汉字编码国家标准，由中国国家标准总局1980年发布，它的全名叫《国家标准信息交换用汉字编码字符集-基本集》。在1981年5月1日开始使用。GB2312编码共收录汉字6763个，其中一级汉字3755个，二级汉字3008个。同时，GB2312编码收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个全角字符，前往<a href="https://www.qqxiuzi.cn/zh/hanzi-gb2312-bianma.php" target="_blank" rel="noopener noreferrer">GB2312查表</a>可以前往查询GB2312编码表。</p>
<p><strong>分区编码</strong></p>
<p>GB2312对收录的字符的表示是分区进行的，一共94个区，每个区有94个位，共有8836个位，这种表示方式称为区位码。下面展示前两个区的字符表。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是分区的规则：</p>
<ul>
<li>每一个区的第0位不记录字符</li>
<li>01-09区收录除汉字外的682个字符。</li>
<li>10-15区为空白区，没有使用。</li>
<li>16-55区收录3755个一级汉字，按拼音排序。</li>
<li>56-87区收录3008个二级汉字，按部首/笔画排序。</li>
<li>88-94区为空白区，没有使用。</li>
</ul>
<p>GB2312既指GB2312字符集，也指GB2312编码。它采用的是双字节编码，第一个字节为高字节，第二个字节为低字节，高字节用于记录字符对应的94个区中的每一个区，低字节用于记录字符一个区中对应的94个位。例如汉字"啊"，是GB2312字符集中的第一个汉字，位于16区的01位，对应的区位码就是1601，GB2312的区位码范围就是0101-9494。</p>
<p>区号和位号分别加上0xA0就是GB2312编码，比如1601的区号是16，位号是01，转换成十六进制就是10和01，高字节为0xA0+0x10=0xB0，低字节为0xA0+0x01=0xA1，高低字节组合起来就是0xB0A1，所以汉字“啊”的GB2312编码就是B0A1。GB2312编码范围：A1A1－FEFE，其中汉字的编码范围为B0A1-F7FE，第一字节0xB0-0xF7（对应区号：16－87），第二个字节0xA1-0xFE（对应位号：01－94）。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304062018572.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>GB2312字符集总共收录了八千多个字符，当时国内的计算机需求并不旺盛，GB2312所以可以满足基本的日常使用。但是随着技术的发展也明显不够用了，于是就有了后来的GBK。</p>
<h3> Big5</h3>
<blockquote>
<p>“大五码”（Big5）是由台湾财团法人信息产业策进会为五大中文套装软件所设计的中文共通内码，在1983年12月完成公告，隔年3月，信息产业策进会与台湾13家厂商签定“16位个人电脑套装软件合作开发（BIG-5）项目（五大中文套装软件）”，因为此中文内码是为台湾自行制作开发之“五大中文套装软件”所设计的，所以就称为Big5中文内码。</p>
</blockquote>
<p>Big5是最常用的繁体中文字符集，共收录13,060个汉字，最初流行于港澳台地区，后面被收录进了GBK。Big5字符集的双字节的编码方式，分高低两个字节，然后组成Big5编码，图示如下：</p>
<figure><img src="https://ask.qcloudimg.com/draft/1300884/ldeacl0av5.jpg?imageView2/2/w/2560/h/7000" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> CJK</h3>
<p>中日韩统一表意文字（英语：CJK Unified Ideographs），也称统一汉字（英语：Unihan），目的是要把分别来自中文、日文、韩文、越南文、壮文中，起源相同、本义相同、形状一样或稍异的表意文字，赋予其在UISO 10646及万国码标准中相同编码。此计划原本只包含中文、日文及韩文中所使用的汉字，旧称中日韩（CJK）统一表意文字（Unified Ideographs）。后来，此计划加入了越南文的喃字，所以合称中日韩越（CJKV）统一表意文字。</p>
<h3> GBK</h3>
<p>GBK，是”国标扩展“拼音GuoBiaoKuoZhan的首字母。1995年12月发布的汉字编码国家标准，是对GB2312编码的扩充，所以完全兼容GB2312字符集，除此之外也支持国际标准ISO/IEC10646-1和国家标准GB13000-1中的全部中日韩汉字（包含部分CJK），还包含了Big5字符集，共收录了21886个字符。</p>
<p><strong>编码</strong></p>
<p>在编码上GBK同样也还是采用的双字节编码，范围在0x8140-0xFEFE之间，高字节在0x81-0xFE范围内，低字节在0x40-0xFE范围内。GBK中总共有三大区：</p>
<ul>
<li>汉字区
<ul>
<li>GB2312汉字区</li>
<li>GB13000.1扩充汉字区</li>
</ul>
</li>
<li>图形符号区
<ul>
<li>GB2312非汉字区</li>
<li>GB13000.1扩充的非汉字区</li>
</ul>
</li>
<li>自定义区</li>
</ul>
<p>下面展示一些GBK中81区到8F区的字符表</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如第一个汉字丂位于81区，位置在4行0列，所以它的GBK编码为8140。</p>
<h3> GB18030</h3>
<p>2000年3月17日发布的汉字编码国家标准，是对GBK编码的扩充，覆盖中文、日文、朝鲜语和中国少数民族文字，其中收录27484个汉字。GB18030字符集采用单字节、双字节和四字节三种方式对字符编码。兼容GBK和GB2312字符集。2005年11月8日，发布了修订版本：GB18030-2005，共收录汉字七万余个。2022年7月19日，发布了第二次修订版本：GB18030-2022，收录汉字总数八万余个。</p>
<p><strong>编码</strong></p>
<p>GB18030编码向下兼容GBK编码和GB2312编码，它采用了单字节、双字节、四字节分段编码方案。</p>
<ul>
<li>
<p>单字节部分采用GB/T 11383的编码结构与规则，使用0x00至0x7F码位共128个字符（对应ASCII码位）。</p>
</li>
<li>
<p>双字节部分，首字节码位从0x81至0xFE，尾字节码位分别是0x40至0x7E和0x80至0xFE。</p>
</li>
<li>
<p>四字节部分采用GB/T 11383未采用的0x30到0x39作为对双字节编码扩充的后缀，这样扩充的四字节编码，其范围为0x81308130到0xFE39FE39。其中第一、三个字节编码码位均为0x81至0xFE，第二、四个字节编码码位均为0x30至0x39</p>
</li>
</ul>
<p>下表是GB18030-2022收录的汉字。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304071521996.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>国家标准查询网站<a href="https://openstd.samr.gov.cn/bzgk/gb/index" target="_blank" rel="noopener noreferrer">国家标准全文公开 (samr.gov.cn)</a></p>
</div>
<h2> Unicode</h2>
<p>Unicode，它是由Unicode联盟创建并维护的，中文名为统一码，由于它收录了世界上绝大多数国家的字符所以又称作万国码。它提供了一种跨平台的乱码问题解决方案，Unicode使用数字来处理字符，为每一个字符指定一个唯一的代码，并将字符视觉上的任务交给其他软件来自行处理。Unicode的编码空间从U+0000到U+10FFFF，共有1,112,064个码位可用来映射字符。</p>
<p>Unicode是当今互联网最流行的字符集发展自USC（ISO/IEC 10646），首个版本发布于1991年10月，最初的目标是为了解决ISO 8859-1所不能解决的计算机多语问题（即一台电脑可以处理多个语言混合的情况），最新版本的Unicode15发布于2022年9月，共收录了161种文字和14万多个字符，现在成为了国际标准通用字符集。</p>
<p>UTF指的是Unicode Transformation Format中文称为Unicode转换格式，Unicode的编码实现方式中最流行的当属于UTF-8，除此之外还有UTF-16和不怎么常用的UTF-32，以及被淘汰了的UTF-7。</p>
<h3> UTF8</h3>
<p>UTF-8（8-bit Unicode Transformation Format），是由Ken Thompson和Robo Pike（他们两个在后来还共同设计了Go语言）共同设计并提出。UTF8是基于Unicode实现的可变长编码，在日后随着计算机的普及，UTF8的编码的使用率高达95%以上，以至于IETF互联网工程小组甚至要求所有的互联网协议都必须支持UTF8。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>Mysql字符编码集中，同时支持utf8和uftmb4，前者一个字符最多占用3个字节，后者一个字符最多占用4个字节，utf8mb4才是utf8的完整实现。</p>
</div>
<p>UTF-8最初使用一至六个字节为每个字符编码，2003年11月UTF-8被RFC 3629重新规范，只能使用原来Unicode定义的区域，U+0000到U+10FFFF，也就是说最多四个字节，UTF-8对于所有常用的字符差不多都可以采用三个字节来表示。在UTF-8编码中，对于一个任意字节B，有着如下规则：</p>
<ul>
<li>对于UTF-8编码中的任意字节B，如果B的第一位为0，则B独立的表示一个字符(ASCII码)</li>
<li>如果B的第一位为1，第二位为0，则B为一个多字节字符中的一个字节(非ASCII字符)</li>
<li>如果B的前两位为1，第三位为0，则B为两个字节表示的字符中的第一个字节</li>
<li>如果B的前三位为1，第四位为0，则B为三个字节表示的字符中的第一个字节</li>
<li>如果B的前四位为1，第五位为0，则B为四个字节表示的字符中的第一个字节</li>
</ul>
<p>通过第二条规则可以很轻易的判断出该字符是不是一个ASCII字符。对于一个任意字符，如果它占用的字节大于1，那么除了第一个字节外，其余字节都以10开头，如下表。</p>
<table>
<thead>
<tr>
<th style="text-align:center">码点的位数</th>
<th style="text-align:center">码点起值</th>
<th style="text-align:center">码点终值</th>
<th style="text-align:center">字节序列</th>
<th style="text-align:center">Byte 1</th>
<th style="text-align:center">Byte 2</th>
<th style="text-align:center">Byte 3</th>
<th style="text-align:center">Byte 4</th>
<th style="text-align:center">Byte 5</th>
<th style="text-align:center">Byte 6</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">U+0000</td>
<td style="text-align:center">U+007F</td>
<td style="text-align:center">1</td>
<td style="text-align:center"><code>0xxxxxxx</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">U+0080</td>
<td style="text-align:center">U+07FF</td>
<td style="text-align:center">2</td>
<td style="text-align:center"><code>110xxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">U+0800</td>
<td style="text-align:center">U+FFFF</td>
<td style="text-align:center">3</td>
<td style="text-align:center"><code>1110xxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">U+10000</td>
<td style="text-align:center">U+1FFFFF</td>
<td style="text-align:center">4</td>
<td style="text-align:center"><code>11110xxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">U+200000</td>
<td style="text-align:center">U+3FFFFFF</td>
<td style="text-align:center">5</td>
<td style="text-align:center"><code>111110xx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td style="text-align:center">U+4000000</td>
<td style="text-align:center">U+7FFFFFFF</td>
<td style="text-align:center">6</td>
<td style="text-align:center"><code>1111110x</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
<td style="text-align:center"><code>10xxxxxx</code></td>
</tr>
</tbody>
</table>
<p>例如中文简体汉字“爱”的Unicode码点为U+7231，位于U+0800 - U+FFFF范围内，所以爱的UTF-8编码需要三个字节，接下来将0x7231转换成二进制形式，从最低位开始每一次取6位，最后一次取成4位，不够的补0，最后就是如下二进制</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据规则填入后就变成了如下，可以看出就是三个字节的大小</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过一般用于表述时的使用形式是十六进制</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304071720118.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>UTF-8编码的字符可以很轻易的通过第一个字节得知该字符占用的字节数。</p>
<h3> UTF16</h3>
<p>UTF-16是Unicode字符集的一种变长编码实现方式，它把Unicode字符集的抽象码位映射成16位长的整数序列，用于数据存储和传递，它使用两个或四个字节来编码字符，编码规则如下，已知Unicode范围是U+0000 - U+10FFFF。</p>
<table>
<thead>
<tr>
<th>码点起值</th>
<th>码点终值</th>
<th>字节</th>
<th>规则</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+0000</td>
<td>U+D7FF</td>
<td>2</td>
<td>UTF16-编码就是Unicode码点，不进行任何转换</td>
</tr>
<tr>
<td>U+E000</td>
<td>U+FFFF</td>
<td>2</td>
<td>UTF16-编码就是Unicode码点，不进行任何转换</td>
</tr>
<tr>
<td>U+10000</td>
<td>U+10FFFF</td>
<td>4</td>
<td>码位减去0x10000，转换成二进制，得到20位二进制序列。高10位的值加上0xD800形成一个16个序列，低十位的值加上DC00形成一个16位序列，然后再拼成一个完整的二进制序列，就得到了一个Unicode字符的UTF-16编码。</td>
</tr>
<tr>
<td>U+D800</td>
<td>U+DFFF</td>
<td>无</td>
<td>不对应任何字符，算作编码错误</td>
</tr>
</tbody>
</table>
<p>比如美元符号"$"，它的Unicode码点是U+0024，它并不在U+10000到U+10FFFF的范围内，所0024就是它的UTF-16编码，占用两个字节。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304072120742.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>再比如符号𐐷的码点是U+10437，二进制序列是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>高十位加上0xD800，低十位加上0xDC00，就变成了下方的序列</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的十六进制形式是</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的UTF-16编码占用4个字节，这种编码方式并不兼容ASCII码。</p>
<h3> UTF32</h3>
<p>UTF-32是固定长度编码，每个码位使用4个字节，Unicode码位直接存储位UTF-32编码，没有任何规则。这种编码几乎没有使用，因为它极大的浪费了空间，由UTF-32所编码的文件占用大概是UTF-16的两倍，UTF-8的四倍。</p>
<p>它唯一的优点就是定索引非常方便，因为是定长编码，字符位置直接使用十进制数，每加一就是下一个字符。</p>
<h2> 其他概念</h2>
<h3> 字节序</h3>
<p>对于UTF序列编码而言，UTF-8不存在字节序问题，因为它的编码单元就是一个字节，没有高低位之分，一次取一个字节就完事。但是UTF-16和UTF-32不同，它至少每次要处理两个字节或4个字节，这就涉及到了字节序的问题。例如Unicode字符集中的汉字“你”，UTF-8编码为EDBDA0，这是大端序，小端序就是低位在低地址，高位在高地址，就是反过来0ADBDE，反正读取时都是从低地址开始读，结果都是一样的。所以这并不会产生什么问题。</p>
<p>汉字”你“的UTF-16的大端编码是4F60，小端是604F，它的单位是两个字节，读取时都是从低地址开始读的，不知道大小端序的话，就不清楚谁是高位字节，谁是低位字节，如果本身是大端序，按照小端序读取的话就成了604F，这完全变成另一个字符了，UTF-32同理。</p>
<figure><img src="https://pic3.zhimg.com/80/v2-2e698172dc190d7e7b510e4e95886dae_720w.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>所以应该显式的告诉计算机是大端序还是小端序，因此UTF-16编码分为UTF-16BE和UTF-16LE，同理也UTF-32也分为UTF-32BE和UTF-32LE。</p>
<h3> BOM</h3>
<p>BOM（byte order mark），中文名为字节序标记。UTF系列的文件通常用零宽非换行空格符（U+FEFF）用于标记大小端序。UTF-8文件有时候也会用到它，不过仅仅只是用来标记该文件是UTF-8文件，它的UTF-8编码是EF BB BF。对于UTF-16的文件而言，标记是FE FF，就是大端序，FF FE就是小端序。</p>
<p>据说给UTF-8文件加BOM头是微软为了兼容旧系统的编码，但是这可能在其他的操作系统就不一定适用了，比如Unix，因为他们的设计原则是“文档中的所有字符必须可见”，所以在windows系统上编写的shell脚本，在unix上就不一定能运行，一些源代码文件也可能会出现编译问题。</p>
<h2> 总结</h2>
<p>一图胜千言，下面这张图可以很直观的看出各个字符集之间的关系。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304071431437.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>国标系列的GB字符集从始至终都向下兼容，在后续更新中慢慢的还囊括了CJK，Big5等其他语种的字符集，但可能并不兼容。ISO8859是早期欧洲为了方便因国家之间语言的细微差异而在ASCII基础之上衍生的一系列字符集。Unicode与GB18030相互不兼容，两者都想收录世界上的绝大多数语言的文字和字符，只不过目前来看Unicode更流行一些，Unicode同时还兼容ISO8859-1。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304061406979.png" type="image/png"/>
    </item>
    <item>
      <title>VuePress使用百度统计分析网站流量</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/statistic.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/statistic.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">VuePress使用百度统计分析网站流量</source>
      <description>VuePress使用百度统计分析网站流量 VuePress结合百度统计，分析网站的访问情况</description>
      <category>技术日志</category>
      <pubDate>Tue, 12 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> VuePress使用百度统计分析网站流量</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021705229.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>VuePress结合百度统计，分析网站的访问情况</p>
<!-- more -->
<hr>
<p>关于网站统计和分析，常用的有如下这些服务商，统计系统主要只是统计数据，分析系统在统计的同时还可以进一步分析数据，对于我而言仅仅只是需要统计一下网站的访问量即可，所以选择统计系统。</p>
<figure><img src="https://picx.zhimg.com/80/45924912141b6a0162c61cf7e0764b5f_1440w.webp?source=1940ef5c" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>本文主要讲的是百度统计，国内使用起来方便一些，虽然百度统计有些功能下线了，可能是因为业务不行吧，但是对我这种轻度用户来说足够使用了，谷歌分析会涉及到一些翻墙的事情。</p>
<h2> 注册</h2>
<p>百度统计：<a href="https://tongji.baidu.com/web5/10000539386/welcome/login" target="_blank" rel="noopener noreferrer">百度统计——一站式智能数据分析与应用平台 </a>，首先前往百度统计页面，登录账号，完成后进入产品即可，个人开发者使用免费版即可。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021714418.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 新增网站</h2>
<p>来到<strong>使用设置/网站列表</strong>页面，点击新增网站</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021715003.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>按照你自己的网站信息去填写表单</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021716906.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 获取代码</h2>
<p>添加成功后，来到代码管理，复制生成的JS代码</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021719873.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>如果只是一般的HTML页面，可以选择直接将复制后的代码放入<code>index.html</code>中的<code>&lt;head&gt;</code>标签内，但我是用的VuePress，不可能每次编译完后手动加到生成的<code>index.html</code>中，所以找到项目中的配置文件<code>.vuepress/config.ts</code>，像如下编写即可。</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>VuePress复制代码时不需要<code>&lt;script&gt;</code>标签</p>
</div>
<h2> 安装检查</h2>
<p>上述操作弄完后，将网站重新部署，然后在使用设置页面的网站列表点击安装检查</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021726479.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>一般在部署完十几分钟后可以正常使用，如果代码安装检查失败可以检查一下是不是在外网或者域名填写错误。</p>
<h2> 统计查看</h2>
<p>在网站概况中可以很清晰的看到网站的浏览量趋势统计和图表</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021729234.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>也可以看到访问者的地域分布统计</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304022049101.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>对于我的小站来说，上述功能已经足够使用了，更多功能的话还请自己去慢慢发现。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021705229.png" type="image/png"/>
    </item>
    <item>
      <title>神界原罪2</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/divinity.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/divinity.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">神界原罪2</source>
      <description>神界原罪2 一款十分精彩的RPG，不论是战斗还是剧情都很出色。</description>
      <category>游戏杂谈</category>
      <pubDate>Sun, 02 Apr 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 神界原罪2</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021221784.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>一款十分精彩的RPG，不论是战斗还是剧情都很出色。</p>
<!-- more -->
<hr>
<p>其实这款游戏我很早就听说它的大名了，但是直到最近才开始打算正式的去体验一下，最后历时71个小时通关了该作。在当今快节奏的时代，各种游戏都在越来越趋于快餐化，力求让玩家能够以更少的操作得到更好的体验，神界原罪2显然并不属于此类，作为一款比较传统的RPG游戏，如果不静下心来体验，那么将会错过非常多的细节和剧情，同样的也会丧失很多乐趣。</p>
<h2> 背景设定</h2>
<figure><img src="https://imgsa.baidu.com/forum/pic/item/6d288498a9014c08ef8fcd1c047b02087af4f4e5.jpg" alt="二代故事舞台只是绿维珑一个很小的部分" tabindex="0" loading="lazy"><figcaption>二代故事舞台只是绿维珑一个很小的部分</figcaption></figure>
<p>故事发生在一个名为绿维珑的大陆上，大陆上的七个神根据自己的模样创造了主要的种族，分别是人类，精灵，矮人，侏儒，蜥蜴人，兽人这六个主要种族。人族数量最多，遍布世界各地，精灵生活在森林里，寿命十分长寿，矮人强壮有力，科技也很发达，蜥蜴人的古代帝国历史十分悠久，同样也是一个非常强大的势力，侏儒在这个世界观里面属于是科技最发达的一个种族，甚至造出了”计算机“，兽人的存在感最弱。世界上有一种物质叫秘源，体内拥有这种物质的人被称为秘源术士，有的是强大的魔法师，或是骁勇善战的战士，抑或是百步穿杨的弓箭手。秘源的使用会导致世界帷幕的破碎，从而引来了另一个世界的生物--虚空异兽，为了抵抗虚空，七神献出了各自一半的力量交给最强的秘源术士--神谕者，让他来领导世界抵抗虚空世界，然而上述只是七神的洗脑版本。真实情况是，在很久以前，一位永生族的学者研究发现了世界帷幕的存在，从帷幕上可以获得秘源的力量，而帷幕的另一边就是虚空，他向神王报告了此事，但是神王觉得虚空太过危险，于是下令停止研究。但是神王下属的七个领主却找到了这名学者，获取了帷幕的力量，将神王和永生族人全部打入了虚空，永生族人全都变成了虚空异兽，七领主将自己包装成了神的模样并创造了自己的种族，并让他们的种族信仰自己，这就是神的原罪。而在几千年后，一个名为温迪戈的秘源术士引发了一场灾难，事后被神谕教团押往欢乐堡，在前往欢乐堡的复仇女神号船上，主角们的故事就正式开始了。</p>
<h2> 主角团</h2>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021221784.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>主角团六人分别是沉睡了千年的永生族亡灵费恩，因曾经被奴役而踏上复仇之路的精灵希贝儿，体内寄宿着恶魔而走上驱魔之路的歌手洛思，曾经参加黑环战争导致精灵种族大灭绝而心灰意冷的孤狼雇佣兵伊凡，被恶魔蛊惑导致驱逐出王室蜥蜴人猩红王子，反抗矮人女王暴政失败而流落当海盗的矮人贵族比斯特，游戏剧情本身是一部群像剧，六个开始毫无关联的秘源术士，在冒险的过程中会产生各种羁绊，他们的过往经历和剧情相互交错，最终都会汇聚到一起，踏上了同一个征途 -- 成为神谕者。</p>
<h2> 任务系统</h2>
<p>该作的任务引导很弱，并不像育碧那种直接在地图上标明了该去哪里，要做什么步骤，为了能让玩家更有代入感，游戏选择了以一种日记的方式来记录每一个任务推进的过程，玩家每发现一条线索或者是触发了什么事件都会被记录在日记上。虽然游戏本身是开放世界地图，但是每一个任务并不会告诉你该去哪里该怎么做，所有任务的细节和流程全部都隐藏在大量的NPC文本对话中。这样做的好处是，可以让玩家更见能够带入主角的视角来体验剧情，同样的缺点也很明显，由于游戏本身非常自由，任务的弱引导经常过导致玩家到处闲逛不小心触发了一个剧情线，而提前开启该线可能会导致原本的支线流程失败或者没有达到想要的结果等等后果，我本身在玩的时候就经常会出现这种情况，不过在第一章过后熟悉了游戏本身的机制后就会习惯性非常留意每一个NPC所说的细节，也就不再会存在满地图乱跑的情况了。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021230410.png" alt="任务系统" tabindex="0" loading="lazy"><figcaption>任务系统</figcaption></figure>
<h2> 战斗系统</h2>
<p>游戏的战斗部分是回合制+策略战棋，角色开场拥有有限的行动点数，不论是移动，还是攻击还是释放技能，都会消耗行动点数，一些特殊技能还会消耗秘源点数。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021345009.png" alt="战斗部分" tabindex="0" loading="lazy"><figcaption>战斗部分</figcaption></figure>
<p>游戏中有很多不同的职业，每一个职业在属性天赋能力上都有着不同的权重，总体来说常见的流派分为法师，弓手，战士，刺客，辅助，召唤师这几个，除此之外还有一些邪门的流派比如陷阱流等等。游戏本身十分的自由，在中期后便可以无限的洗点，所以玩家可以随时随地的决定自己的职业。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021346878.png" alt="人物界面" tabindex="0" loading="lazy"><figcaption>人物界面</figcaption></figure>
<p>在游戏的前期，资源匮乏，可以学习的技能比较少，以平A为主的物理系职业比较吃香，到了中期地图浮木镇以后，法师的输出就开始成熟了，而到后期法师的伤害几乎是完爆物理职业。游戏中法师最强的一个技能，大地学派的大地之怒十分变态，即便是在最终战中，辅助将所有的怪聚集在一起后，只需要一个大地之怒便可以秒杀所有敌人结束战斗，足以可见其伤害有多么恐怖。</p>
<h2> 结语</h2>
<p>尽管游戏本身很优秀，但是后两章地图由于资金问题肉眼可见的质量明显下降，总体来说游戏体验最佳的部分就是第一章欢乐堡和第二章浮木镇，后期的战斗也变得相对比较无聊，但这些并不影响神界原罪2成为一款十分优秀的CRPG作品，甚至是该界的天花板。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021221784.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>AutoToolBox</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/autotoolbox.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/autotoolbox.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">AutoToolBox</source>
      <description>AutoToolBox 一个用Go编写的小工具 - Windows下ToolBox菜单自动生成器</description>
      <category>技术日志</category>
      <pubDate>Sun, 23 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> AutoToolBox</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/toolbox.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>一个用Go编写的小工具 - Windows下ToolBox菜单自动生成器</p>
<!-- more -->
<hr>
<h2> 简介</h2>
<p><a href="https://youtrack.jetbrains.com/issue/TBX-2540/Associate-file-extenstions-with-correct-Toolbox-app-or-with-the-Toolbox-itself-so-that-files-can-be-launched-from-Windows" target="_blank" rel="noopener noreferrer">youtrack问题链接</a></p>
<p>JetBrain旗下的ToolBox是一款方便管理IDE版本的工具软件，但是对于右键菜单打开项目的功能却迟迟不支持，但是在youtrack上的相关问题最早可以追溯到五年前。网上的大多数方法都是直接将对应IDE的<code>exe</code>文件路径写入注册表中，此种方法对于使用ToolBox的用户来说，更新和回退版本后就会导致原有的菜单失效，并且手动修改注册表也十分的繁琐。所幸的是，ToolBox提供了一个稳定的Shell脚本路径，通过将该路径下的脚本注册到注册表中，便可以实现右键菜单的功能。AutoToolBox做的就是根据正确的输入路径，生成两份Windows注册表脚本，直接点击脚本运行就可以修改注册表，由于该目录下的脚本是ToolBox维护的，所以不用担心更新和回退版本失效的问题。</p>
<p>项目地址：<a href="https://github.com/246859/AutoToolBox" target="_blank" rel="noopener noreferrer">246859/AutoToolBox: A simple tool that can automatically generate ToolBox registry scripts, only for Windows systems. (github.com)</a></p>
<h2> 脚本路径</h2>
<p>首先你需要找到shell脚本路径，脚本路径可以在ToolBox的设置中直接查看，例如</p>
<figure><img src="https://github.com/246859/AutoToolBox/raw/main/assets/README/image-20230217210439344.png" alt="image-20230217210439344" tabindex="0" loading="lazy"><figcaption>image-20230217210439344</figcaption></figure>
<p>路径为</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个路径就是程序的输入路径</p>
<h2> 目录结构</h2>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用之前，先确保输入目录的结构如上，<code>ico</code>文件夹是图标文件夹，ToolBox不会自动创建该目录，需要用户自行创建然后去对应的IDE目录里面寻找对应的图标文件，需要注意的是<code>cmd</code>文件与<code>ico</code>文件名称要一致。</p>
<h2> 生成脚本</h2>
<p>使用Github上最新的Relaese的二进制可执行文件，执行如下命令</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后会在目标目录下生成下面的文件夹</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>文件夹内有两个脚本：</p>
<ul>
<li><code>toolboxAdd.reg</code> - 用于修改注册表，使用后将会添加到右键菜单中</li>
<li><code>toolboxRemove.reg</code> - 用于撤销对注册表的修改，使用后将会从右键菜单中删除已修改的项</li>
</ul>
<figure><a href="https://github.com/246859/AutoToolBox/blob/main/assets/README/image-20230217211635959.png" target="_blank" rel="noopener noreferrer"><img src="https://github.com/246859/AutoToolBox/raw/main/assets/README/image-20230217211635959.png" alt="image-20230217211635959" tabindex="0" loading="lazy"></a><figcaption>image-20230217211635959</figcaption></figure>
<p>在Windows系统下<code>reg</code>脚本可以直接点击执行，当你看到如下输出时，说明执行成功。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 效果</h2>
<p>最终效果是无论右键文件夹或是右键点击文件夹背景都可以看到如下类似的菜单</p>
<figure><img src="https://github.com/246859/AutoToolBox/raw/main/assets/README/image-20230217212654787.png" alt="image-20230217212654787" tabindex="0" loading="lazy"><figcaption>image-20230217212654787</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/toolbox.png" type="image/png"/>
    </item>
    <item>
      <title>Typora配合图床搭建教程</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/pic.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/pic.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Typora配合图床搭建教程</source>
      <description>Typora配合图床搭建教程 Typora配合搭建完毕后的图床，可以有效的解决的md文件的图片引用问题。</description>
      <category>技术日志</category>
      <pubDate>Fri, 24 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Typora配合图床搭建教程</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/wallhaven-953v9d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>Typora配合搭建完毕后的图床，可以有效的解决的md文件的图片引用问题。</p>
<!-- more -->
<hr>
<p>Typroa是一款很流行的Markdown编辑器，但是苦图片引用问题久矣，本地编写好的md文件发送给别人后，就好经常出现图片丢失问题，这种情况下只有两个方法：</p>
<ul>
<li>把图片一起打包</li>
<li>引用在线图片</li>
</ul>
<p>一起打包显然会使得文件变得非常臃肿，在线图片也并不好找，同样的上述情况也适用于各个Markdown静态文档生成框架，举例VuePress，每个框架对于静态图片的引用都有着不同的规则，假设日后更换其他的框架图片引用问题将会非常的令人头疼。所以对于个人开发者而言，非常有必要搭建个人图床。</p>
<br>
<h2> PicGo</h2>
<p><strong>一个用于快速上传图片并获取图片 URL 链接的工具</strong>，支持许多云服务商的对象存储，例如阿里云，腾讯云，七牛云等等，同时也支持Gitee，Github，软件技术基于Vue+Electron。</p>
<p>PicGo下载：<a href="https://github.com/Molunerfinn/PicGo#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85" target="_blank" rel="noopener noreferrer">Molunerfinn/PicGo: A simple &amp; beautiful tool for pictures uploading built by vue-cli-electron-builder (github.com)</a></p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324201548045.png" alt="image-20230324201548045" tabindex="0" loading="lazy"><figcaption>image-20230324201548045</figcaption></figure>
<p>下载完成后，打开是下面这个样子。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324201612971.png" alt="image-20230324201612971" tabindex="0" loading="lazy"><figcaption>image-20230324201612971</figcaption></figure>
<p>这个是最简陋的版本，一个个手动上传肯定是很累的，这里打开Typora的设置（如果是其他Markdown编辑器应该也是同理）</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324201808929.png" alt="image-20230324201808929" tabindex="0" loading="lazy"><figcaption>image-20230324201808929</figcaption></figure>
<p>但此时PicGo还未配置成功，点击验证图片上床肯定是会失败的，接下来有两个选择。</p>
<h2> GItee</h2>
<p>这里之所以使用Gitee而不使用Github，主要是Github国内的访问速度太感人了，想要达到正常速度必须自行搭建CDN，所以这里利用一下免费的GItee。不过Gitee前不久已经加了防盗链，如果是在网站上引用图床肯定是会失效的，但如果只是在本地Markdown文件引用依旧可以成功。</p>
<h3> 创建仓库</h3>
<p>首先需要创建一个<strong>公开</strong>的仓库，不公开访问不了，名称建议英文，最好不要带特殊符号。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324202452126.png" alt="image-20230324202452126" tabindex="0" loading="lazy"><figcaption>image-20230324202452126</figcaption></figure>
<h3> 私人令牌</h3>
<p>接下来要获取私人令牌</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324202548316.png" alt="image-20230324202548316" tabindex="0" loading="lazy"><figcaption>image-20230324202548316</figcaption></figure>
<p>在个人设置中创建一个私人令牌。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324202639749.png" alt="image-20230324202639749" tabindex="0" loading="lazy"><figcaption>image-20230324202639749</figcaption></figure>
<p>描述随意，建议只放开这几个权限，生成后记住你的私人令牌。</p>
<h3> 下载插件</h3>
<p>打开PciGo软件，点开插件设置，搜索Gitee，下载gitee-Uploader。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324202915702.png" alt="image-20230324202915702" tabindex="0" loading="lazy"><figcaption>image-20230324202915702</figcaption></figure>
<p>等待安装完毕后，在图床设置中填写gitee的配置项</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324203304435.png" alt="image-20230324203304435" tabindex="0" loading="lazy"><figcaption>image-20230324203304435</figcaption></figure>
<p>完成后点击确认，并设置为默认图床，然后到上传区测试结果即可</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202303242051716.png" alt="image-20230324205101674" tabindex="0" loading="lazy"><figcaption>image-20230324205101674</figcaption></figure>
<br>
<h2> 腾讯云Cos</h2>
<p>作者恰好前不久买了腾讯云对象存储的资源包，就刚好拿来当图床用，其他云服务商的配置过程都是类似的。首先在对象存储控制台中访问密钥</p>
<h3> 申请密钥</h3>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324203515364.png" alt="image-20230324203515364" tabindex="0" loading="lazy"><figcaption>image-20230324203515364</figcaption></figure>
<p>然后前往密钥界面</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324203613705.png" alt="image-20230324203613705" tabindex="0" loading="lazy"><figcaption>image-20230324203613705</figcaption></figure>
<p>记住<code>APPID</code>，<code>SecretId</code>，<code>SecretKey</code></p>
<h3> 创建桶</h3>
<figure><img src="https://gitee.com/FLoat1024/pic/raw/master/img/image-20230324204211170.png" alt="image-20230324204211170" tabindex="0" loading="lazy"><figcaption>image-20230324204211170</figcaption></figure>
<p>在创建存储桶时必须要保证桶的权限是公共读私有写，也就是可以匿名访问，记住<code>BucketId</code>和区域后就可以前往PicoGo中填写配置。</p>
<h3> 填写配置</h3>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324203822706.png" alt="image-20230324203822706" tabindex="0" loading="lazy"><figcaption>image-20230324203822706</figcaption></figure>
<p>填写完配置项后确认并设置为默认图床，然后在上传区测试即可。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/image-20230324203857990.png" alt="image-20230324203857990" tabindex="0" loading="lazy"><figcaption>image-20230324203857990</figcaption></figure>
<br>
<h2> 最后</h2>
<p>配置完成后的效果是Typora直接复制图片就会上传到个人图床，这样日后文件迁移也会方便的多，当然前提是得有一个稳定的图床。</p>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/wallhaven-953v9d.png" type="image/png"/>
    </item>
    <item>
      <title>VuePress博客教程</title>
      <link>https://246859.github.io/my-blog-giscus/posts/code/vuepresshope.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/code/vuepresshope.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">VuePress博客教程</source>
      <description>VuePress博客教程 VuePress是一个vue驱动的静态网站生成器，非常适合来写静态文档，当然也可以拿来编写个人博客，配合第三方开发的主题可以做出非常精美的静态网站。</description>
      <category>技术日志</category>
      <pubDate>Tue, 12 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> VuePress博客教程</h1>
<figure><img src="https://vuepress.vuejs.org/hero.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>VuePress是一个vue驱动的静态网站生成器，非常适合来写静态文档，当然也可以拿来编写个人博客，配合第三方开发的主题可以做出非常精美的静态网站。</p>
<hr>
<!-- more -->
<br>
<p>本文主要介绍的是如何使用VuePress编写个人博客，由于默认主题比较的简洁，可以考虑采用第三方主题，这里推荐使用<a href="https://theme-hope.vuejs.press/zh/" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a>，它有以下优点：</p>
<ul>
<li>开箱即用</li>
<li>完整的博客功能</li>
<li>markdown增强</li>
<li>文章信息统计</li>
<li>众多插件支持</li>
<li>图片预览</li>
<li>Vue3+TypeScript</li>
<li>以及众多的其他优点</li>
</ul>
<p>该主题提供非常多的功能，可以让省去很多麻烦的配置，专注于文档编写，并且该主题作者也是VuePress项目成员之一。</p>
<br>
<h2> 安装</h2>
<p>创建vuepress-theme-hope 项目，选择你自己的包管理器：</p>

<p>过程中会要求配置一些东西，过程中会有一个选项选择项目类型，<code>blog</code>博客或者<code>docs</code>文档，根据自己的需求选择就好，然后等待一会儿就可以完成项目的创建。</p>
<br>
<h2> 配置</h2>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成项目创建后，<code>.vuepress</code>是项目的配置文件夹，下面是一些文件夹的作用：</p>
<ul>
<li><code>.cahce</code> ：用于缓存文件的文件夹</li>
<li><code>.temp</code>：存放临时文件的文件夹</li>
<li><code>dist</code>：存放打包文件的文件夹</li>
<li><code>public</code>：存放公共静态资源的文件夹</li>
<li><code>navbar</code>：存放导航栏配置的文件夹</li>
<li><code>sidebar</code>：存放侧边栏配置的文件夹</li>
<li><code>styles</code>：存放项目的样式文件</li>
<li><code>config.ts</code>：主要配置文件</li>
<li><code>theme.ts</code>：项目主题配置文件</li>
</ul>
<p>对于博客而言，首先需要确保<code>theme.ts</code>文件内的插件配置<code>blog</code>项为<code>true</code></p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主页</h3>
<p><code>REAMDE.md</code>也要根据博客来进行相应的修改</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于博客主页的详细的<code>Frontmatter</code>配置可以前往<a href="https://theme-hope.vuejs.press/zh/config/frontmatter/blog-home.html" target="_blank" rel="noopener noreferrer">博客主页 Frontmatter 配置 | vuepress-theme-hope (vuejs.press)</a>。</p>
<br>
<h2> 图片</h2>
<p>vuepress-theme-hope主题对于图片有很好的支持，且支持：</p>
<ul>
<li>左右滑动按顺序浏览页面内其他的图片</li>
<li>查看图片的描述</li>
<li>对图片进行缩放</li>
<li>全屏浏览图片</li>
<li>下载图片</li>
<li>分享图片</li>
</ul>
<p>在编写md文件时，只需要将文件放入<code>public</code>文件夹内，然后通过<code>/</code>开头的路径访问即可，例如<code>test</code>图片位于<code>/public/test/test.png</code>，那么对于的markdown如下</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当在主题选项中设置 <code>plugin.mdEnhance.imgSize: true</code> 时，可以使用 <code>=widthxheight</code> 指定图像大小。</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多图片用法可以前往<a href="https://theme-hope.vuejs.press/zh/guide/markdown/image.html" target="_blank" rel="noopener noreferrer">图片 | vuepress-theme-hope (vuejs.press)</a>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>这里需要注意的是，该主题摘要部分的图片渲染有点问题，所以建议使用Gitee作为图床，Github搭建站点。</p>
</div>
<br>
<h2> 博客页面路径</h2>
<p>博客提供的默认路径如下，如果它们与你的已有路径发生冲突，并且你不想调整自己的路径，你可以对它们进行修改。</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>描述</th>
<th>默认路径</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>article</code></td>
<td>文章列表</td>
<td><code>/article/</code></td>
</tr>
<tr>
<td><code>category</code></td>
<td>分类地图页</td>
<td><code>/category/</code></td>
</tr>
<tr>
<td><code>categoryItem</code></td>
<td>特定分类列表</td>
<td><code>/category/:name/</code></td>
</tr>
<tr>
<td><code>tag</code></td>
<td>标签地图页</td>
<td><code>/tag/</code></td>
</tr>
<tr>
<td><code>tagItem</code></td>
<td>特定标签列表</td>
<td><code>/tag/:name/</code></td>
</tr>
<tr>
<td><code>star</code></td>
<td>星标文章列表</td>
<td><code>/star/</code></td>
</tr>
<tr>
<td><code>timeline</code></td>
<td>时间线列表</td>
<td><code>/timeline/</code></td>
</tr>
</tbody>
</table>
<h2> Markdown增强</h2>
<p>这块功能特别强大，东西非常多，建议去官网自己看。<a href="https://theme-hope.vuejs.press/zh/guide/markdown/intro.html" target="_blank" rel="noopener noreferrer">启用 Markdown 增强 | vuepress-theme-hope (vuejs.press)</a></p>
<br>
<h2> 文章信息</h2>
<p>使用<code>frontmatter</code>可以控制文章的一些基本属性，下面是一个例子。</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>date</code>：日期</p>
<p><code>article</code>：是否添加进文章列表</p>
<p><code>start</code>：是否收藏，也可以是数字，数字越大排序权重越高</p>
<p><code>sticky</code>：是否置顶，也可以是数字，数字越大排序权重越高</p>
<p><code>category</code>：分类，YAML列表格式</p>
<p><code>tag</code>：标签，YAML列表格式</p>
<p>更多配置项可以前往<a href="https://theme-hope.vuejs.press/zh/config/frontmatter/info.html" target="_blank" rel="noopener noreferrer">信息 Frontmatter 配置 | vuepress-theme-hope (vuejs.press)</a>。</p>
<h2> 功能</h2>
<h3> 阅读时间</h3>
<p>配置<code>theme.tx</code>下的<code>plugins.readingTime.wordPerMinute</code>，如下</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>
<h3> 评论</h3>
<p>主题支持Gisus，Waline，Twikoo，Artalk，四种评论插件，这里为了方便我们就采用Giscus，利用GitHub dicussion制作的评论，其他三种都需要额外去对应官方申请应用，Giscus是完全开源免费的，对于我们个人博客而言已经完全足够使用了。</p>
<ul>
<li><a href="https://giscus.app/zh-CN" target="_blank" rel="noopener noreferrer">giscus主页</a></li>
<li><a href="https://plugin-comment2.vuejs.press/zh/config/giscus.html" target="_blank" rel="noopener noreferrer">Giscus 选项 | 评论插件 (vuejs.press)</a></li>
</ul>
<p>前提是你需要先安装 <a href="https://github.com/apps/giscus" target="_blank" rel="noopener noreferrer">Giscus App</a>，使其有权限访问对应仓库，然后需要创建一个公开的GitHub仓库，并且开启Discussion功能，在仓库中的settings中开启即可。然后在Giscus官网中填写仓库名称，和分类，还有一些配置项，根据自己的喜好来即可，最后giscus会生成一个<code>&lt;script&gt;</code>标签，不过我们并不需要该标签，只需要获取其中的<code>data-reop</code>，<code>data-repo-id</code>，<code>data-category</code>，<code>data-category-id</code> 这四个属性即可。然后填入<code>theme.ts</code>中的<code>plugins</code>项中，如下：</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外还有一些其他的外观配置项，请自行了解，配置完毕后重启应用，访问一篇文章通过Oauth2登录Github即可评论。</p>
<br>
<h2> 插件</h2>
<p>vuepress-theme-hope提供了许多可以使用的主题，这些主题都需要额外的安装才能使用，下面是一些常用的主题。</p>
<br>
<h3> 搜索</h3>
<p>安装 <code>vuepress-plugin-search-pro</code>：</p>

<p>从 <code>vuepress-plugin-search-pro</code> 导入 <code>searchProPlugin</code> 并将其应用至 <code>config.ts</code> 下的 <code>plugins</code> 选项：</p>
<div class="language-typescript line-numbers-mode" data-ext="ts"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启项目，然后就可以在导航栏上看到搜索框了。</p>
<br>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>经过以上的配置后，已经达到一个基本的博客要求了，但是除去上面这些功能之外，vuepress-theme-hope还有很多有趣的功能和插件，请自行前往官网了解。</p>
</div>
<h2> 部署</h2>
<p>部署的话对于这种小体量静态网站，没有必要去购买专门的云服务器，可以直接使用Github Page功能，或者国内访问更快的Gitee。这里使用的是Github Workflows自动部署。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推送完代码后Github会自动执行Actions，然后将网站打包的内容推送到<code>gh-pages</code>分支，然后Github会自动更新静态网站的内容。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>需要注意的是要开启Github Action允许修改仓库的权限。</p>
</div>
]]></content:encoded>
      <enclosure url="https://vuepress.vuejs.org/hero.png" type="image/png"/>
    </item>
    <item>
      <title>血源诅咒</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/bloodborn.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/bloodborn.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">血源诅咒</source>
      <description>血源诅咒 心中永远的神作游戏，没有之一</description>
      <category>游戏杂谈</category>
      <pubDate>Sun, 01 Jan 2017 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 血源诅咒</h1>
<figure><img src="https://img.3dmgame.com/uploads/allimg/170717/316-1FGGG244.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>心中永远的神作游戏，没有之一</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://img.3dmgame.com/uploads/allimg/170717/316-1FGGG244.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>风来之国</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/eastward.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/eastward.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">风来之国</source>
      <description>风来之国 它让我想起了小时候躲在被窝里在捧着老式诺基亚玩的一款塞班像素游戏</description>
      <category>游戏杂谈</category>
      <pubDate>Mon, 20 Sep 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 风来之国</h1>
<figure><img src="https://blob.keylol.com/forum/202104/26/235332fwzmvhyw2brmbwcj.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>它让我想起了小时候躲在被窝里在捧着老式诺基亚玩的一款塞班像素游戏</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://blob.keylol.com/forum/202104/26/235332fwzmvhyw2brmbwcj.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>烟火</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/firework.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/firework.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">烟火</source>
      <description>烟火 一款小体量的恐怖游戏，像一本短暂又令人回味的小说</description>
      <category>游戏杂谈</category>
      <pubDate>Mon, 15 Mar 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 烟火</h1>
<img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/firework.jpg" style="zoom:200%;">
<p>一款小体量的恐怖游戏，像一本短暂又令人回味的小说</p>
<!-- more -->
<hr>
<p>正文</p>
]]></content:encoded>
    </item>
    <item>
      <title>古剑奇谭三：梦付千秋星垂野</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/gujianqitan.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/gujianqitan.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">古剑奇谭三：梦付千秋星垂野</source>
      <description>古剑奇谭三：梦付千秋星垂野 高中时在WebGame上掏钱买的一款国产游戏，应该是那段时间国产游戏行业的一道光</description>
      <category>游戏杂谈</category>
      <pubDate>Wed, 02 Jan 2019 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 古剑奇谭三：梦付千秋星垂野</h1>
<figure><img src="https://th.bing.com/th/id/R.cd979e8c62da7290fde16c6080042814?rik=rxs41US0GuFXCQ&amp;riu=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F0837aafae38223909e07185b86185f6da5c75663.jpg&amp;ehk=LU2HP%2BnwwYcKlAGYQikcmnN3p8edyK67hv%2FRW%2Fo6EIg%3D&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>高中时在WebGame上掏钱买的一款国产游戏，应该是那段时间国产游戏行业的一道光</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://th.bing.com/th/id/R.cd979e8c62da7290fde16c6080042814?rik=rxs41US0GuFXCQ&amp;riu=http%3a%2f%2fi2.hdslb.com%2fbfs%2farchive%2f0837aafae38223909e07185b86185f6da5c75663.jpg&amp;ehk=LU2HP%2bnwwYcKlAGYQikcmnN3p8edyK67hv%2fRW%2fo6EIg%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" type="image/"/>
    </item>
    <item>
      <title>Minecraft</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/mc.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/mc.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Minecraft</source>
      <description>Minecraft 从小学就开始玩了，从啥都不会到自己搭建游戏服务器，再到自己编写游戏插件，踏上编程之路也全是因为它。</description>
      <category>游戏杂谈</category>
      <pubDate>Sun, 20 Sep 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Minecraft</h1>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/mc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>从小学就开始玩了，从啥都不会到自己搭建游戏服务器，再到自己编写游戏插件，踏上编程之路也全是因为它。</p>
<!-- more -->
<hr>
]]></content:encoded>
      <enclosure url="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/mc.png" type="image/png"/>
    </item>
    <item>
      <title>僵尸毁灭工程</title>
      <link>https://246859.github.io/my-blog-giscus/posts/game/pzb.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/game/pzb.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">僵尸毁灭工程</source>
      <description>僵尸毁灭工程 一款十分真实的丧尸沙盒生存游戏，心中同题材下最好的游戏。</description>
      <category>游戏杂谈</category>
      <pubDate>Thu, 01 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 僵尸毁灭工程</h1>
<figure><img src="https://p.qpic.cn/mwegame/0/35174daa0ac19eea6357e12924a107ca/" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>一款十分真实的丧尸沙盒生存游戏，心中同题材下最好的游戏。</p>
<!-- more -->
<hr>
<p>有那么一段时间我比较沉迷于丧尸这个题材，不论是小说还是电影或者是游戏，在尝试了非常多的这类题材作品过后，最后发现了代入感最强的还是这一款名为《僵尸毁灭工程》的沙盒生存游戏。不过在稍微了解了这个游戏的历史后，发现它居然有好几年的制作历史了，并且一直在持续更新中，在创意工坊中有着大量的玩家自制的MOD可供使用，生态也算是非常的好了。</p>
<h2> 真实感</h2>
<figure><img src="https://pic4.zhimg.com/v2-aaa96d369f69d684eed906f8dddfe6b7_r.jpg" alt="僵毁中的医学人体图" tabindex="0" loading="lazy"><figcaption>僵毁中的医学人体图</figcaption></figure>
<p>虽然游戏本身的画面并不是特别出色，甚至角色还是多边形人，但是丝毫不会减少游戏的魅力--真实。游戏在很多地方都力求还原现实，比如角色遇到丧尸会害怕，当处于恐惧状态时，会跑的更快，但是攻击伤害会更低。当翻窗进废弃房屋搜寻物资时，需要注意窗户上是否有碎玻璃，否则会划伤身体，而清理玻璃必须要戴手套或者使用工具，否则徒手清理也会受伤。当玩家受伤时，需要进行及时的包扎和消毒，如果不及时照顾伤口可能会导致伤口感染，感染后就可能会增加恶化的几率，伤口过深可能会引起破伤风，这时候需要更加专业的医疗工具来进行治疗。当角色遇到的负面事情过多时，就会陷入抑郁状态，而过度抑郁会导致角色状态大幅度下降等等，上述所描述的这些也只是游戏中众多细节中的其中几种，正是这些看起来十分繁琐的细节促成了很强的沉浸感和代入感，玩家可以很直观的体会到一个普通人在面对丧尸危机大爆发的无力感和绝望感。</p>
<h2> 背景</h2>
<p>游戏在初代其实是想走线性流程这个方向，那时候是有固定的剧情，但是到了后续更新变成了开放世界沙盒模式，剧情也删减了很多，就现在而言几乎没有什么剧情，但是有一个基本的背景设定（顺便提一下游戏早期只有四个人开发，一路走来可以说是十分的励志）。僵尸毁灭工程的故事发生在上个世界90年代的美国肯塔基州，病毒爆发地点位于路易斯维尔市，也就是地图上右上角的那个大城市，在军方的生化实验室病毒泄露后，短短几天事情便发展到了不可控的地步，直到最后蔓延到了全球。</p>
<figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202304021913341.png" alt="肯塔基架空地图" tabindex="0" loading="lazy"><figcaption>肯塔基架空地图</figcaption></figure>
<p>而作为主角的玩家，只是一个平平无奇的普通人，唯一的目标就是搜寻资源并在这个末世活下去，除此之外游戏开始之后便不会再有任何的剧情。</p>
<h2> 流程</h2>
<p>游戏机制算得上十分复杂，玩家需要注意的东西挺多的，第一次玩可能会摸不着头脑，需要考虑到季节，天气，温度，时间，饥饿，口渴，疲劳，忧郁，无聊，受伤，负重等等。在正常的流程中，一般是7月9号夏天开局，你的职业可以是一个普通的上班族，也可以是警察或者是建筑工人，或者是退伍军人，在刚开始的几天仍然会正常播放电视节目和广播节目，彻底沦陷后整个世界只剩一片寂静。门外可能已经聚集了不少丧尸，这时手无寸铁的你需要利用手上一切可以使用的工具，溜出房子去寻找一个安全的庇护所。第一件要做的事就是武装自己，可以是平底锅，棒球棒，撬棍，或者是钢管，切记千万不要随便开枪，枪声会引来一大群丧尸，这反而会成为丧尸们的开饭铃。在找到武器后玩家需要将自己身体的重要部位保护起来，一旦被丧尸造成伤口后果是不堪设想的，你需要穿一些厚实的衣服，但注意别太暖和了，否则运动一小会你就会中暑。</p>
<p>当有了基本的自我保护能力后，你需要搜集食物和水源，因为不久后城市里就会断水断电，在超市和便利店里可能还会有一些其他幸存者没有搜刮完的食物，这些地方往往危机四伏，冰箱里的食物记得尽早食用，食物腐烂后会导致食物中毒，在医疗崩溃的条件下生病基本等同于死亡，这也是为什么即便再渴也不要随便引用来历不明的水。看见医疗物资一定要记得带上，末世下医疗物资十分珍贵，即便是感冒都可能要人命。居住的庇护所至少要有两层，因为在一楼沦陷的情况下还可以从二楼逃跑，切记时刻给自己留退路，在睡觉的时候一定要记得关门，没有人知道夜里会发生什么事情，在丧尸入侵庇护所后，如果尸体过多不清理掉，很有可能会导致你感染。在完全的断水断电后，对于水源你可以接雨水或者到河边取水后煮沸了再饮用，对于食物你可以不断的出去搜寻物资，或者将找到的种子耕种成农作物自给自足。在基本的稳定下来后，你可以短暂的放松一下了，长时间神经的紧绷会让你十分敏感，这可能会导致抑郁，尝试看录像带或者看漫画来缓解和放松心情。在外出搜寻的过程中，你可能会偶尔听到直升机的声音，在看到直升机后千万不要像个傻子一样大声呼救，马上躲到建筑物内不要让它发现。新闻直升机在发现你后并不会实施救援，而一直盘旋在你头顶拍摄新闻素材，尤其喜欢拍摄幸存者被丧尸撕咬的画面，螺旋桨所发出的巨大噪声会把几乎半个城市的丧尸全部吸引过来，这时候你基本上就是死路一条。</p>
<p>在解决了温饱过后，如果你运气好在废弃房子的仓库里搜到发电机，那么你可以去所剩无几的加油站的油箱中加油，这样一来你的房子就可以使用冰箱和厨具了，切记发电机产生的气体是有毒的，你需要将它放在室外。如果能找到一辆还能开的车就更完美了，开车的时候注意不要开太快，否则出了车祸后果将不堪设想，不要开车去撞丧尸，因为车的损耗承受不起，在开车回家时不要发出太大的噪声，否则你只会把丧尸引到庇护所去。大城市里面虽然物资丰富，但几乎遍地丧尸，小镇虽然物资少，但是更加安全，切记物资再珍贵也没有命贵。有些丧尸生前是运动员，奔跑的速度非常快，遇到这类丧尸一定要避开。在探索建筑物时，每一道门后面都可能藏有危险，切记不要拿脸开门。有时候野外并不一定就比城市更加安全，夜晚的树林同样危机四伏。如果在深山老林中碰巧发现了军事基地，拿到强大的武器后，你就拥有了与尸潮一战的能力。丧尸们总是会有规律的活动，在一个月的某几天，它们的数量会达到顶峰，这是最危险的时候，丧尸会如潮水般向你的庇护所袭来，你需要奋战到最后一刻来保护你的基地。如果失守了，也不要忘了留得青山在，不怕没柴烧。</p>
<figure><img src="https://ts1.cn.mm.bing.net/th/id/R-C.c02ad2d0d95f4872067737420690445c?rik=HqY%2B09mKPj3gkA&amp;riu=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F52b46f10c9537dee758573433c55ab3794d26ab9.jpg&amp;ehk=vmotHDavUbFII%2BqgBVfvhlRMoWRkkcKj8FGGAOm%2FiEk%3D&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>最后，你在这艰难的末世中顽强的存活了下来，此时病毒已经蔓延到了世界各地，整个世界一片寂静，就算你每天开着收音机也不会有任何回应。对于这绝望的世界，你可以开枪了解自己来结束这痛苦的一生，或者是带着一整车物资外出寻找新的希望，也可以带着武器前往大型商场享受屠杀丧尸的最后狂欢，不论选择哪一种，末世都始终会持续下去，当你死后，会有新的幸存者会继承你的意志并继续活下去。</p>
<h2> 结语</h2>
<p>同样的题材也有很多优秀的游戏，即便僵毁画面很复古，但是僵尸毁灭工程满足了我一切对于末世的幻想，非常对我的胃口，在我心目中就是最好的丧尸题材游戏，美中不足的是游戏中人类NPC和动物几乎没有出现，互动也很少，不过这些可以通过加入第三方MOD来添加更多有趣的玩法。</p>
]]></content:encoded>
      <enclosure url="https://p.qpic.cn/mwegame/0/35174daa0ac19eea6357e12924a107ca/" type="image/"/>
    </item>
    <item>
      <title>Mysql忘记数据库密码</title>
      <link>https://246859.github.io/my-blog-giscus/posts/problem/mysqlpassword.html</link>
      <guid>https://246859.github.io/my-blog-giscus/posts/problem/mysqlpassword.html</guid>
      <source url="https://246859.github.io/my-blog-giscus/rss.xml">Mysql忘记数据库密码</source>
      <description>Mysql忘记数据库密码 记录了Mysql忘记密码的几种解决方式</description>
      <category>问题记录</category>
      <pubDate>Sun, 12 Sep 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Mysql忘记数据库密码</h1>
<p>记录了Mysql忘记密码的几种解决方式</p>
<!-- more -->
<hr>
]]></content:encoded>
    </item>
  </channel>
</rss>