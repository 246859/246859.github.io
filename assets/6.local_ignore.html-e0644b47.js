import{_ as a,W as s,X as n,a0 as i,Y as e,Z as d,a1 as l}from"./framework-b5ea9e64.js";const o={},t=e("h1",{id:"git-update-index-忽略本地修改",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-update-index-忽略本地修改","aria-hidden":"true"},"#"),d(" Git update-index 忽略本地修改")],-1),r=e("figure",null,[e("img",{src:"https://public-1308755698.cos.ap-chongqing.myqcloud.com//upload/202503171448906.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),c=l(`<hr><p>使用Git版本控制系统进行本地开发时，如果你不想Git追踪某一个文件或文件夹，我们都知道通过<code>.gitignore</code>来忽略这些文件，但是<code>.gitignore</code>文件是需要提交到远程仓库上的，如果你仅仅只是想忽略掉自己本地的文件或文件夹，而不想影响远程仓库上的其它开发者，之前的办法就行不通了。一个非常经典的例子就是现代前端开发中都会用到的<code>.env</code>文件，我们会在<code>.env.development</code>中设置开发环境的接口BASE_URL，但不是每个人本地开发的BASE_URL都是相同的，所以你自己做的修改不能提交到远程仓库上，但这个文件也不能被<code>.gitignore</code>忽略。</p><h2 id="skip-worktree" tabindex="-1"><a class="header-anchor" href="#skip-worktree" aria-hidden="true">#</a> skip-worktree</h2><p>在这种情况下，我们可以使用如下的命令，来忽略本地的修改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> update-index --skip-worktree <span class="token punctuation">[</span><span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然你也可以选择撤销</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> update-index --no-skip-worktree <span class="token punctuation">[</span><span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想查看工作树中哪些文件被skip了，可以使用下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> ls-files <span class="token parameter variable">-v</span> <span class="token operator">|</span> <span class="token function">grep</span> ^s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些命令使用起来很简单，没什么难度。</p><h2 id="潜在问题" tabindex="-1"><a class="header-anchor" href="#潜在问题" aria-hidden="true">#</a> 潜在问题</h2><p>如果只是一般使用那基本上不会有问题，但如果多人协作开发，使用<code>skip-workree</code>就可能会出现一些情况，比如说，你本地忽略了<code>.env.devlopment</code>文件，但是另一个开发者在里面添加了一个新的环境变量，并推送到远程仓库，这时候你尝试通过<code>pull</code>来更新代码，可能会如下类似的报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error:
Your <span class="token builtin class-name">local</span> changes to the following files would be overwritten by merge:
                vue-project/.env.development
Please commit your changes or stash them before you merge.
Aborting
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于文件内容不一样，就必须要解决冲突，解决冲突的思路取决于你是否想将本地修改推送到远程仓库。</p><p><strong>不提交本地修改</strong></p><ol><li><p>撤销<code>skip-worktree</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> update-index --no-skip-worktree .env.development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>暂存文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> stash .env.development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Pull更新代码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>应用暂存文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>解决冲突合并后，重新给文件加上<code>skip-worktree</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> update-index --skip-worktree .env.development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p><strong>提交本地修改</strong></p><ol><li><p>撤销<code>skip-worktree</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> update-index --no-skip-worktree .env.development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>提交该文件</p></li><li><p>Pull更新代码</p></li><li><p>解决冲突</p></li><li><p>将合并后的文件推送到远程仓库</p></li></ol>`,18);function p(u,v){return s(),n("div",null,[t,r,i(" more "),c])}const h=a(o,[["render",p],["__file","6.local_ignore.html.vue"]]);export{h as default};
