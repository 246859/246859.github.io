import{_ as e,W as p,X as o,Y as c,Z as n,$ as s,a0 as i,a1 as a,C as l}from"./framework-a4c02b8f.js";const u={},r=n("h1",{id:"go语言操作windows注册表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#go语言操作windows注册表","aria-hidden":"true"},"#"),s(" go语言操作windows注册表")],-1),d=n("img",{src:"https://public-1308755698.cos.ap-chongqing.myqcloud.com//upload/202407241437452.png",style:{zoom:"200%"}},null,-1),k=a(`<hr><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>注册表是windows中很重要的一个功能，通过它可以实现很多功能，在Go语言中操作注册表就目前而言有三种方式</p><ol><li>命令：通过<code>exec.Command</code>执行<code>REGINI</code>命令来操作注册表，效率较低</li><li>系统调用：在<code>syscall/zsyscall_windows.go</code>文件中包含了所有的注册表操作的系统调用，用编程的方式进行操作</li><li>库：go官方编写了注册表库<code>registry</code>，其原理就是封装了系统调用</li></ol><p>很显然，使用官方编写的库效率是最高的，不过它并没有加入标准库，需要我们单独下载。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go get golang.org/x/sys@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// Windows defines some predefined root keys that are always open.</span>
	<span class="token comment">// An application can use these keys as entry points to the registry.</span>
	<span class="token comment">// Normally these keys are used in OpenKey to open new keys,</span>
	<span class="token comment">// but they can also be used anywhere a Key is required.</span>
	CLASSES_ROOT     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>HKEY_CLASSES_ROOT<span class="token punctuation">)</span>
	CURRENT_USER     <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>HKEY_CURRENT_USER<span class="token punctuation">)</span>
	LOCAL_MACHINE    <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>HKEY_LOCAL_MACHINE<span class="token punctuation">)</span>
	USERS            <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>HKEY_USERS<span class="token punctuation">)</span>
	CURRENT_CONFIG   <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>HKEY_CURRENT_CONFIG<span class="token punctuation">)</span>
	PERFORMANCE_DATA <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>HKEY_PERFORMANCE_DATA<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大部分注册表操作都是基于这些windows预定义好的键，库中以常量的方式定义了这些键，可以直接使用。操作一个注册表项的API跟操作文件没什么太大的区别，使用完后一样要关闭。</p><h3 id="新建" tabindex="-1"><a class="header-anchor" href="#新建" aria-hidden="true">#</a> 新建</h3><p>下面演示一个创建GoLand右键菜单项的例子。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">CreateKey</span><span class="token punctuation">(</span>k Key<span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">,</span> access <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>newk Key<span class="token punctuation">,</span> openedExisting <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先如果要修改右键菜单的话，就需要基于<code>CLASSES_ROOT</code>键，rootKey作为第一个参数，子路径作为第二个参数传递</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 在文件夹背景生效
Directory\\Background\\shell\\goland
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,14),v=n("code",null,"access",-1),m=n("code",null,"perm",-1),g={href:"https://learn.microsoft.com/zh-cn/windows/win32/sysinfo/registry-key-security-and-access-rights?redirectedfrom=MSDN",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>golandkey<span class="token punctuation">,</span> exist<span class="token punctuation">,</span> err <span class="token operator">:=</span> registry<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span>CLASSES_ROOT<span class="token punctuation">,</span> 
                                            <span class="token string">\`Directory\\Background\\shell\\goland\`</span><span class="token punctuation">,</span>registry<span class="token punctuation">.</span>WRITE<span class="token operator">|</span>registry<span class="token punctuation">.</span>READ<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后给它设置两个字符串值，类型为<code>REG_EXPAND_SZ</code>或<code>REG_MULTI_SZ</code>都行，键为空就表示默认值，内容会展示到菜单上，<code>Icon</code>即图标。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>bin <span class="token operator">:=</span> <span class="token string">&quot;D:\\\\work\\\\tools\\\\toolbox\\\\GoLand\\\\bin\\\\goland64.exe&quot;</span>
golandkey<span class="token punctuation">.</span><span class="token function">SetStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Open Goland Here&quot;</span><span class="token punctuation">)</span>
golandkey<span class="token punctuation">.</span><span class="token function">SetExpandStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;Icon&quot;</span><span class="token punctuation">,</span> bin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再创建一个子项<code>command</code>，表示动作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>golandCmdKey<span class="token punctuation">,</span> exist<span class="token punctuation">,</span> err <span class="token operator">:=</span> registry<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span>CLASSES_ROOT<span class="token punctuation">,</span> 
                                               <span class="token string">\`Directory\\Background\\shell\\goland\\command\`</span><span class="token punctuation">,</span> registry<span class="token punctuation">.</span>WRITE<span class="token operator">|</span>registry<span class="token punctuation">.</span>READ<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它的默认值就是goland程序的地址</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>golandCmdKey<span class="token punctuation">.</span><span class="token function">SetExpandStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\`<span class="token string">&quot;D:\\work\\tools\\toolbox\\GoLand\\bin\\goland64.exe&quot;</span> <span class="token string">&quot;%V&quot;</span>\`<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完整代码如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;golang.org/x/sys/windows/registry&quot;</span>
	<span class="token string">&quot;log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	golandkey<span class="token punctuation">,</span> exist<span class="token punctuation">,</span> err <span class="token operator">:=</span> registry<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span>CLASSES_ROOT<span class="token punctuation">,</span> <span class="token string">\`Directory\\Background\\shell\\goland\`</span><span class="token punctuation">,</span> registry<span class="token punctuation">.</span>WRITE<span class="token operator">|</span>registry<span class="token punctuation">.</span>READ<span class="token punctuation">)</span>
	<span class="token keyword">if</span> exist <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Key already exists&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	bin <span class="token operator">:=</span> <span class="token string">&quot;D:\\\\work\\\\tools\\\\toolbox\\\\GoLand\\\\bin\\\\goland64.exe&quot;</span>
	golandkey<span class="token punctuation">.</span><span class="token function">SetStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Open Goland Here&quot;</span><span class="token punctuation">)</span>
	golandkey<span class="token punctuation">.</span><span class="token function">SetExpandStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;Icon&quot;</span><span class="token punctuation">,</span> bin<span class="token punctuation">)</span>

	golandCmdKey<span class="token punctuation">,</span> exist<span class="token punctuation">,</span> err <span class="token operator">:=</span> registry<span class="token punctuation">.</span><span class="token function">CreateKey</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span>CLASSES_ROOT<span class="token punctuation">,</span> <span class="token string">\`Directory\\Background\\shell\\goland\\command\`</span><span class="token punctuation">,</span> registry<span class="token punctuation">.</span>WRITE<span class="token operator">|</span>registry<span class="token punctuation">.</span>READ<span class="token punctuation">)</span>
	<span class="token keyword">if</span> exist <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Key already exists&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	golandCmdKey<span class="token punctuation">.</span><span class="token function">SetExpandStringValue</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>\`<span class="token string">&quot;%s&quot;</span> <span class="token string">&quot;%%V&quot;</span>\`<span class="token punctuation">,</span> bin<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是在运行时必须要以管理员模式执行，否则会拒绝访问。</p><p>成功后效果如下</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//upload/202407241536810.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><p>如果要删除一个注册表项，那么它必须没有子项才能成功删除，否则会返回错误</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Access is denied
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以必须要先递归删除它的所有子项才行，我们可以编写下面一个简单的函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">deleteKey</span><span class="token punctuation">(</span>key registry<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// 访问当前项，查看是否存在，不存在直接返回</span>
	parentKey<span class="token punctuation">,</span> err <span class="token operator">:=</span> registry<span class="token punctuation">.</span><span class="token function">OpenKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> path<span class="token punctuation">,</span> registry<span class="token punctuation">.</span>READ<span class="token punctuation">)</span>
	<span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> registry<span class="token punctuation">.</span>ErrNotExist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> parentKey<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 拼接路径</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\\\&#39;</span> <span class="token punctuation">{</span>
		path <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">\`\\\`</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 访问它的所有子项</span>
	subKeyNames<span class="token punctuation">,</span> err <span class="token operator">:=</span> parentKey<span class="token punctuation">.</span><span class="token function">ReadSubKeyNames</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>

	<span class="token comment">// 继续递归</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> subKeyNames <span class="token punctuation">{</span>
		subKeyPath <span class="token operator">:=</span> path <span class="token operator">+</span> name
		err <span class="token operator">:=</span> <span class="token function">deleteKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> subKeyPath<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 最后才删除当前注册表项</span>
	<span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">DeleteKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> path<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总的来说使用官方的API是最简单的，库函数加起来也没几个，非常易于使用。</p>`,19);function y(h,f){const t=l("ExternalLinkIcon");return p(),o("div",null,[r,d,c(" more "),k,n("p",null,[s("第三个参数是"),v,s("，就类似于访问文件的"),m,s("一样，关于这个的详细释义可以看"),n("a",g,[s("注册表项安全和访问权限 - Win32 apps | Microsoft Learn"),i(t)]),s("，那么代码如下")]),b])}const w=e(u,[["render",y],["__file","registry.html.vue"]]);export{w as default};
