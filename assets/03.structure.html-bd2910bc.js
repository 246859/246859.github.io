const t=JSON.parse('{"key":"v-0ac45706","path":"/posts/pattern/03.structure.html","title":"结构型模式","lang":"zh-CN","frontmatter":{"date":"2023-10-06T00:00:00.000Z","article":true,"star":false,"sticky":false,"category":"设计模式","tag":["设计模式","go"],"description":"结构型模式 结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式， 前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。 由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型 模式具有更大的灵活性。 代理模式 由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。 抽象主题（Subject）接口： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。 真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。 代理（Proxy）类 ：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问，控制或扩展真实主题的功能。","head":[["meta",{"property":"og:url","content":"https://246859.github.io/my-blog-giscus/posts/pattern/03.structure.html"}],["meta",{"property":"og:site_name","content":"寒江蓑笠翁"}],["meta",{"property":"og:title","content":"结构型模式"}],["meta",{"property":"og:description","content":"结构型模式 结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式， 前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。 由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型 模式具有更大的灵活性。 代理模式 由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。 抽象主题（Subject）接口： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。 真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。 代理（Proxy）类 ：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问，控制或扩展真实主题的功能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:18:03.000Z"}],["meta",{"property":"article:author","content":"寒江蓑笠翁"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:18:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-02T06:18:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"寒江蓑笠翁\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":2,"title":"装饰模式","slug":"装饰模式","link":"#装饰模式","children":[]},{"level":2,"title":"外观模式","slug":"外观模式","link":"#外观模式","children":[]},{"level":2,"title":"桥接模式","slug":"桥接模式","link":"#桥接模式","children":[]},{"level":2,"title":"组合模式","slug":"组合模式","link":"#组合模式","children":[]},{"level":2,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]}],"git":{"createdTime":1701497883000,"updatedTime":1701497883000,"contributors":[{"name":"246859","email":"2633565580@qq.com","commits":1}]},"readingTime":{"minutes":24.48,"words":3672},"filePathRelative":"posts/pattern/03.structure.md","localizedDate":"2023年10月6日","excerpt":"<h1> 结构型模式</h1>\\n<p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式， 前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。 由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型 模式具有更大的灵活性。</p>\\n<h2> 代理模式</h2>\\n<p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p>\\n<ul>\\n<li>\\n<p>抽象主题（Subject）接口： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</p>\\n</li>\\n<li>\\n<p>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</p>\\n</li>\\n<li>\\n<p>代理（Proxy）类 ：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问，控制或扩展真实主题的功能。</p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
