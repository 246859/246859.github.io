const e=JSON.parse('{"key":"v-2067c7f1","path":"/posts/pattern/04.behavior.html","title":"行为型模式","lang":"zh-CN","frontmatter":{"date":"2023-10-09T00:00:00.000Z","article":true,"star":false,"sticky":false,"category":"设计模式","tag":["设计模式","go"],"description":"行为型模式 行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。 模板方法模式 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。 抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。 模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。 基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。 具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。","head":[["meta",{"property":"og:url","content":"https://246859.github.io/my-blog-giscus/posts/pattern/04.behavior.html"}],["meta",{"property":"og:site_name","content":"寒江蓑笠翁"}],["meta",{"property":"og:title","content":"行为型模式"}],["meta",{"property":"og:description","content":"行为型模式 行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。 模板方法模式 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。 抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。 模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。 基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。 具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:18:03.000Z"}],["meta",{"property":"article:author","content":"寒江蓑笠翁"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-10-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:18:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"行为型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-02T06:18:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"寒江蓑笠翁\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"模板方法模式","slug":"模板方法模式","link":"#模板方法模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"备忘录模式","slug":"备忘录模式","link":"#备忘录模式","children":[]},{"level":2,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":2,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":2,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":2,"title":"解释器模式","slug":"解释器模式","link":"#解释器模式","children":[]},{"level":2,"title":"访问者模式","slug":"访问者模式","link":"#访问者模式","children":[]},{"level":2,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[]}],"git":{"createdTime":1701497883000,"updatedTime":1701497883000,"contributors":[{"name":"246859","email":"2633565580@qq.com","commits":1}]},"readingTime":{"minutes":36.15,"words":5423},"filePathRelative":"posts/pattern/04.behavior.md","localizedDate":"2023年10月9日","excerpt":"<h1> 行为型模式</h1>\\n<p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。</p>\\n<h2> 模板方法模式</h2>\\n<p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p>\\n<ul>\\n<li>\\n<p>抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p>\\n<ul>\\n<li>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</li>\\n<li>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。</li>\\n</ul>\\n</li>\\n<li>\\n<p>具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
