import{_ as i,W as t,X as l,Y as o,Z as s,$ as n,a0 as c,a1 as a,C as r}from"./framework-a4c02b8f.js";const d={},p=s("h1",{id:"在linux上搭建k8s集群",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#在linux上搭建k8s集群","aria-hidden":"true"},"#"),n(" 在Linux上搭建K8s集群")],-1),u=s("figure",null,[s("img",{src:"https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309251850239.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),v=s("p",null,"最近捣鼓了下用虚拟机搭建k8s集群，坑还是挺多的。",-1),b=a(`<hr><figure><img src="https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最近在学习k8s，不得不说这玩意运行起来还是相当的麻烦，这里记录一下，以免后面忘了。事先准备好三台ubuntu22.04虚拟机，一台用作control plane，两台用作worker node。</p><h2 id="前置准备" tabindex="-1"><a class="header-anchor" href="#前置准备" aria-hidden="true">#</a> 前置准备</h2><p>在开始安装k8s之前，需要做一些前置的准备。</p><h3 id="关闭firewalld" tabindex="-1"><a class="header-anchor" href="#关闭firewalld" aria-hidden="true">#</a> 关闭firewalld</h3><p>k8s有着自己的网络策略配置功能，关闭friewalld是为了避免起冲突。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看状态</span>
$ ufw status
<span class="token comment"># 禁用</span>
$ ufw disable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="禁用selinux" tabindex="-1"><a class="header-anchor" href="#禁用selinux" aria-hidden="true">#</a> 禁用selinux</h3><p>selinux是linux的一个安全子系统，很多服务器未为了避免麻烦都会把它关了，ubuntu在装机的时候不会自带这玩意，但如果你装了的话可以按照下面的步骤关闭。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 临时关闭</span>
$ setenforce <span class="token number">0</span>
<span class="token comment"># 永久关闭</span>
$ <span class="token function">vim</span> /etc/selinux/config
<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭swap" tabindex="-1"><a class="header-anchor" href="#关闭swap" aria-hidden="true">#</a> 关闭swap</h3><p>kubelet运行时明确不支持swap，也就是交换内存，一部分原因是想让程序在内存耗尽以后正常OOM而不是一直靠swap苟着从而造成不必要的损失。如果未关闭swap直接启动的话，kubelet在启动时会显示如下信息告诉你应该关闭swap，否则不让你启动。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;command failed&quot; err=&quot;failed to run Kubelet: running with swap on is not supported, please disable swap! or set --fail-swap-on flag to false. /proc/swaps contained: [Filename\\t\\t\\t\\tType\\t\\tSize\\t\\tUsed\\t\\tPriority /swapfile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先执行命令关闭交换分区</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ swapoff <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后修改<code>fstab</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">vim</span> /etc/fstab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注释掉如下行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># /swapfile                                 none            swap    sw              0       0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行如下命令查看swap分区情况，如果关闭了的话就不会有任何显示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">swapon</span> <span class="token parameter variable">-show</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置网络" tabindex="-1"><a class="header-anchor" href="#配置网络" aria-hidden="true">#</a> 配置网络</h3><p>转发 IPv4 并让 iptables 看到桥接流量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules-load.d/k8s.conf</span>
overlay
br_netfilter
EOF</span>

$ <span class="token function">sudo</span> modprobe overlay
$ <span class="token function">sudo</span> modprobe br_netfilter

<span class="token comment"># 设置所需的 sysctl 参数，参数在重新启动后保持不变</span>
$ <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/k8s.conf</span>
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF</span>

<span class="token comment"># 应用 sysctl 参数而不重新启动</span>
$ <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">--system</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过运行以下指令确认 <code>br_netfilter</code> 和 <code>overlay</code> 模块被加载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ lsmod <span class="token operator">|</span> <span class="token function">grep</span> br_netfilter
$ lsmod <span class="token operator">|</span> <span class="token function">grep</span> overlay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过运行以下指令确认 <code>net.bridge.bridge-nf-call-iptables</code>、<code>net.bridge.bridge-nf-call-ip6tables</code> 和 <code>net.ipv4.ip_forward</code> 系统变量在你的 <code>sysctl</code> 配置中被设置为 1</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sysctl</span> net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="cri" tabindex="-1"><a class="header-anchor" href="#cri" aria-hidden="true">#</a> CRI</h2><p>Container Runtime Interface（CRI），即容器运行时接口，要想使用K8s的话，需要系统提供CRI，目前实现了CRI的软件的有</p><ul><li>containerd，推荐用这个，比较轻量。</li><li>docker engine，并没有实现CRI但是可以通过其它方法桥接，不过一般安装了docker engine的系统都会有containerd，因为containerd就是docker的一部分，所以还是建议用containerd。</li><li>CRI-O</li><li>MCR</li></ul><h3 id="containerd" tabindex="-1"><a class="header-anchor" href="#containerd" aria-hidden="true">#</a> containerd</h3><p>下面会用containerd来做演示，其实containerd安装过程就是docker安装过程，先设置docker官方的apt仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Add Docker&#39;s official GPG key:</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span> gnupg
<span class="token function">sudo</span> <span class="token function">install</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-d</span> /etc/apt/keyrings
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.gpg
<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /etc/apt/keyrings/docker.gpg

<span class="token comment"># Add the repository to Apt sources:</span>
<span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span>
  <span class="token string">&quot;deb [arch=&quot;</span><span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span><span class="token string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\
  &quot;</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$VERSION_CODENAME</span>&quot;</span><span class="token variable">)</span></span><span class="token string">&quot; stable&quot;</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>
  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt-get</span> updat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),m={href:"http://xn--containerd-j05qpn034ff9b232ee69h.io",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者你也可以直接下载containerd的二进制文件，它也是用go写的。在安装好后，需要配置systemd cgroup驱动，在containerd配置文件中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/etc/containerd/config.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改如下的配置项</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options</span><span class="token punctuation">]</span>
    <span class="token key property">SystemdCgroup</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用如下命令可以重置containerd配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ containerd config default <span class="token operator">&gt;</span> /etc/containerd/config.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><p>从软件包安装的话可能会默认禁用CRI，在配置文件中可能会看到这么一行，将其去掉就行。</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token key property">disabled_plugins</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;CRI&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完后重启containerd</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart containerd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>配置下k8s的阿里云apt源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/apt/sources.list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新证书</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再更新源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">apt</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后安装<code>kubeadm</code>，<code>kubectl</code>，<code>kubelet</code>，这三个最好软件版本保持一致。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> kubeadm kubelet kubectl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>完成后确认版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubelet <span class="token parameter variable">--version</span>
Kubernetes v1.28.2
$ kubeadm version
kubeadm version: <span class="token operator">&amp;</span>version.Info<span class="token punctuation">{</span>Major:<span class="token string">&quot;1&quot;</span>, Minor:<span class="token string">&quot;28&quot;</span>, GitVersion:<span class="token string">&quot;v1.28.2&quot;</span>, GitCommit:<span class="token string">&quot;89a4ea3e1e4ddd7f7572286090359983e0387b2f&quot;</span>, GitTreeState:<span class="token string">&quot;clean&quot;</span>, BuildDate:<span class="token string">&quot;2023-09-13T09:34:32Z&quot;</span>, GoVersion:<span class="token string">&quot;go1.20.8&quot;</span>, Compiler:<span class="token string">&quot;gc&quot;</span>, Platform:<span class="token string">&quot;linux/amd64&quot;</span><span class="token punctuation">}</span>
$ kubectl version
Client Version: v1.28.2
Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3
The connection to the server localhost:8080 was refused - did you specify the right <span class="token function">host</span> or port?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确认版本一致后，看看k8s的镜像，后续必须pull这些镜像，因为这是k8s集群运行的必要组件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubeadm config images list
registry.k8s.io/kube-apiserver:v1.28.2
registry.k8s.io/kube-controller-manager:v1.28.2
registry.k8s.io/kube-scheduler:v1.28.2
registry.k8s.io/kube-proxy:v1.28.2
registry.k8s.io/pause:3.9
registry.k8s.io/etcd:3.5.9-0
registry.k8s.io/coredns/coredns:v1.10.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，系统上会有下面这几个东西</p><ul><li><code>kebuadm</code>，用来快速启动和搭建k8s集群的工具，可以省去我们很多操作。</li><li><code>kubelet</code>，k8s集群命令行管理工具</li><li><code>kubelet</code>，代表着一个节点，是k8s集群的基本单位。</li><li><code>crictl</code>，容器运行时管理工具，只不过它是为k8s工作的，正确使用的前提是系统上安装了支持CRI的软件并正确指定了endpoint。</li><li><code>ctr</code>，ctr是containerd的命令管理工具，containerd实现了CRI。</li></ul><h3 id="cri-endpoint" tabindex="-1"><a class="header-anchor" href="#cri-endpoint" aria-hidden="true">#</a> cri endpoint</h3><p>ctrctl虽然是容器运行时管理工具，但是它并没有具体的实现，只是定义了一组接口规范。要想正常工作还得依赖具体的实现了CRI的软件，之前已经安装好了containerd，所以运行前要先指定crictl的<code>runtime-endpoint</code>，也就是containerd的sock地址。</p><p>通过查看配置文件<code>etc/containerd/config.toml</code>可以得知</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">grpc</span><span class="token punctuation">]</span>
  <span class="token key property">address</span> <span class="token punctuation">=</span> <span class="token string">&quot;/run/containerd/containerd.sock&quot;</span>
  <span class="token key property">gid</span> <span class="token punctuation">=</span> <span class="token number">0</span>
  <span class="token key property">max_recv_message_size</span> <span class="token punctuation">=</span> <span class="token number">16777216</span>
  <span class="token key property">max_send_message_size</span> <span class="token punctuation">=</span> <span class="token number">16777216</span>
  <span class="token key property">tcp_address</span> <span class="token punctuation">=</span> <span class="token string">&quot;&quot;</span>
  <span class="token key property">tcp_tls_ca</span> <span class="token punctuation">=</span> <span class="token string">&quot;&quot;</span>
  <span class="token key property">tcp_tls_cert</span> <span class="token punctuation">=</span> <span class="token string">&quot;&quot;</span>
  <span class="token key property">tcp_tls_key</span> <span class="token punctuation">=</span> <span class="token string">&quot;&quot;</span>
  <span class="token key property">uid</span> <span class="token punctuation">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么endpoint就是</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>unix:///run/containerd/containerd.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以执行如下命令配置crictl</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo crictl config runtime-endpoint unix:///run/containerd/containerd.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="拉镜像" tabindex="-1"><a class="header-anchor" href="#拉镜像" aria-hidden="true">#</a> 拉镜像</h3><p>kubeadm支持通过命令预先拉取需要用到的组件镜像，也就是之前list出来的镜像，执行如下命令就可以预先拉取要用到的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubeadm config images pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是不出意外的话，意外就会发生了，上述的镜像仓库是<code>registry.k8s.io</code>，是由谷歌托管的，国内基本上没法访问，甚至于在线获取版本信息都不行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>W0927 19:34:16.513175    4571 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://cdn.dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)
W0927 19:34:16.513428    4571 version.go:105] falling back to the local client version: v1.28.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法就是国内的镜像，阿里云有一个镜像仓库，地址如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>registry.aliyuncs.com/google_containers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>网上有很多教程直接在<code>kubeadm init</code>时直接指定了阿里云镜像仓库，这样会导致kubelet没法正常运行，会说找不到组件的镜像，因为kubelet运行的时候只认<code>registry.k8s.io</code>镜像，而通过阿里云镜像仓库拉下来的镜像的前缀是<code>registry.aliyuncs.com/google_containers</code>，所以kubelet自然就没法启动了。所以对应的，拉取完下面的镜像后，应该将其名字改回去。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>registry.aliyuncs.com/google_containers/kube-apiserver:v1.28.2
registry.aliyuncs.com/google_containers/kube-controller-manager:v1.28.2
registry.aliyuncs.com/google_containers/kube-scheduler:v1.28.2
registry.aliyuncs.com/google_containers/kube-proxy:v1.28.2
registry.aliyuncs.com/google_containers/pause:3.9
registry.aliyuncs.com/google_containers/etcd:3.5.9-0
registry.aliyuncs.com/google_containers/coredns/coredns:v1.10.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>crictl并不能修改镜像名，这是ctr应该干的事情，为了能够查看到k8s的镜像，指定命名空间<code>k8s.io</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> ctr <span class="token parameter variable">-n</span> k8s.io images <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个个改名太麻烦了，所以我写了一个脚本，来自动化完成这个过程。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">aliyun</span><span class="token operator">=</span><span class="token string">&quot;registry.aliyuncs.com/google_containers&quot;</span>
<span class="token assign-left variable">k8sio</span><span class="token operator">=</span><span class="token string">&quot;registry.k8s.io&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;pulling needed k8s images from <span class="token variable">$aliyun</span>&quot;</span>
kubeadm config images pull --image-repository <span class="token string">&quot;<span class="token variable">$aliyun</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;compare local with <span class="token variable">$k8sio</span>&quot;</span>
<span class="token comment"># list all kubeadm needs images</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span>kubeadm config images list<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># get suffxi images name</span>
	<span class="token assign-left variable">imagename</span><span class="token operator">=</span><span class="token variable">\${i<span class="token operator">##</span>*<span class="token operator">/</span>}</span>
    <span class="token comment"># concat new name</span>
	<span class="token assign-left variable">aliimage</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$aliyun</span>/<span class="token variable">$imagename</span>&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;[rename] <span class="token variable">$aliimage</span> &gt;&gt;&gt;&gt; <span class="token variable">$i</span>&quot;</span>
    <span class="token comment"># rename registry to k8s.io</span>
	ctr <span class="token parameter variable">-n</span> k8s.io i tag <span class="token string">&quot;<span class="token variable">$aliimage</span>&quot;</span> <span class="token string">&quot;<span class="token variable">$i</span>&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;[remove] aliyun image <span class="token variable">$aliimage</span>&quot;</span>
    <span class="token comment"># remove aliyun images</span>
	ctr <span class="token parameter variable">-n</span> k8s.io i <span class="token function">rm</span> <span class="token string">&quot;<span class="token variable">$aliimage</span>&quot;</span>
<span class="token keyword">done</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者也可以</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://raw.githubusercontent.com/246859/shell/main/k8s/aliyun_images_pull.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>接下来使用kubeadm来初始化，这个操作只用在master节点进行。init时有很多参数，开始前可以看看命令帮助。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ kubeadm init <span class="token parameter variable">-h</span>
Usage:
  kubeadm init <span class="token punctuation">[</span>flags<span class="token punctuation">]</span>
  kubeadm init <span class="token punctuation">[</span>command<span class="token punctuation">]</span>

Available Commands:
  phase       Use this <span class="token builtin class-name">command</span> to invoke single phase of the init workflow

Flags:
      --apiserver-advertise-address string   The IP address the API Server will advertise it<span class="token string">&#39;s listening on. If not set the default network interface will be used.
      --apiserver-bind-port int32            Port for the API Server to bind to. (default 6443)
      --apiserver-cert-extra-sans strings    Optional extra Subject Alternative Names (SANs) to use for the API Server serving certificate. Can be both IP addresses and DNS names.
      --cert-dir string                      The path where to save and store the certificates. (default &quot;/etc/kubernetes/pki&quot;)
      --certificate-key string               Key used to encrypt the control-plane certificates in the kubeadm-certs Secret.
      --config string                        Path to a kubeadm configuration file.
      --control-plane-endpoint string        Specify a stable IP address or DNS name for the control plane.
      --cri-socket string                    Path to the CRI socket to connect. If empty kubeadm will try to auto-detect this value; use this option only if you have more than one CRI installed or if you have non-standard CRI socket.
      --dry-run                              Don&#39;</span>t apply any changes<span class="token punctuation">;</span> just output what would be done.
      --feature-gates string                 A <span class="token builtin class-name">set</span> of <span class="token assign-left variable">key</span><span class="token operator">=</span>value pairs that describe feature gates <span class="token keyword">for</span> various features. Options are:
                                             <span class="token assign-left variable">EtcdLearnerMode</span><span class="token operator">=</span>true<span class="token operator">|</span><span class="token boolean">false</span> <span class="token punctuation">(</span>ALPHA - <span class="token assign-left variable">default</span><span class="token operator">=</span>false<span class="token punctuation">)</span>
                                             <span class="token assign-left variable">PublicKeysECDSA</span><span class="token operator">=</span>true<span class="token operator">|</span><span class="token boolean">false</span> <span class="token punctuation">(</span>ALPHA - <span class="token assign-left variable">default</span><span class="token operator">=</span>false<span class="token punctuation">)</span>
                                             <span class="token assign-left variable">RootlessControlPlane</span><span class="token operator">=</span>true<span class="token operator">|</span><span class="token boolean">false</span> <span class="token punctuation">(</span>ALPHA - <span class="token assign-left variable">default</span><span class="token operator">=</span>false<span class="token punctuation">)</span>
                                             <span class="token assign-left variable">UpgradeAddonsBeforeControlPlane</span><span class="token operator">=</span>true<span class="token operator">|</span><span class="token boolean">false</span> <span class="token punctuation">(</span>DEPRECATED - <span class="token assign-left variable">default</span><span class="token operator">=</span>false<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就开始初始化，如果上面的配置都做好了的话，是不会出现问题的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> kubeadm init <span class="token punctuation">\\</span>
--apiserver-advertise-address<span class="token operator">=</span><span class="token number">192.168</span>.48.138 <span class="token punctuation">\\</span>
--image-repository<span class="token operator">=</span>registry.aliyuncs.com/google_containers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53);function g(h,f){const e=r("ExternalLinkIcon");return t(),l("div",null,[p,u,v,o(" more "),b,s("p",null,[s("a",m,[n("最后就只安装containerd.io"),c(e)]),n("，不用安装dcoker-ce和docker-cli。")]),k])}const x=i(d,[["render",g],["__file","k8s_install.html.vue"]]);export{x as default};
