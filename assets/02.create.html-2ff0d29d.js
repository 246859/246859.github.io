const e=JSON.parse('{"key":"v-0beae905","path":"/posts/pattern/02.create.html","title":"创建型模式","lang":"zh-CN","frontmatter":{"date":"2023-10-03T00:00:00.000Z","article":true,"star":false,"sticky":false,"category":"设计模式","tag":["设计模式","go"],"description":"创建型模式 创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。 这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。 简单工厂模式 这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。 在Go中是没有构造函数的说法，一般会定义Newxxxx函数来初始化相关的结构体或接口，而通过Newxxx函数来初始化返回接口时就是简单工厂模式，一般对于Go而言，最推荐的做法就是简单工厂。","head":[["meta",{"property":"og:url","content":"https://246859.github.io/my-blog-giscus/posts/pattern/02.create.html"}],["meta",{"property":"og:site_name","content":"寒江蓑笠翁"}],["meta",{"property":"og:title","content":"创建型模式"}],["meta",{"property":"og:description","content":"创建型模式 创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。 这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。 简单工厂模式 这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。 在Go中是没有构造函数的说法，一般会定义Newxxxx函数来初始化相关的结构体或接口，而通过Newxxx函数来初始化返回接口时就是简单工厂模式，一般对于Go而言，最推荐的做法就是简单工厂。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:18:03.000Z"}],["meta",{"property":"article:author","content":"寒江蓑笠翁"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:published_time","content":"2023-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:18:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建型模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-02T06:18:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"寒江蓑笠翁\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"简单工厂模式","slug":"简单工厂模式","link":"#简单工厂模式","children":[]},{"level":2,"title":"工厂方法模式","slug":"工厂方法模式","link":"#工厂方法模式","children":[]},{"level":2,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":2,"title":"建造者模式","slug":"建造者模式","link":"#建造者模式","children":[]},{"level":2,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]}],"git":{"createdTime":1701497883000,"updatedTime":1701497883000,"contributors":[{"name":"246859","email":"2633565580@qq.com","commits":1}]},"readingTime":{"minutes":16.78,"words":2517},"filePathRelative":"posts/pattern/02.create.md","localizedDate":"2023年10月3日","excerpt":"<h1> 创建型模式</h1>\\n<p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。 这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p>\\n<h2> 简单工厂模式</h2>\\n<p>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\\n<p>在Go中是没有构造函数的说法，一般会定义<code>Newxxxx</code>函数来初始化相关的结构体或接口，而通过<code>Newxxx</code>函数来初始化返回接口时就是简单工厂模式，一般对于Go而言，最推荐的做法就是简单工厂。</p>","autoDesc":true}');export{e as data};
