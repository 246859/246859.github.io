import{_ as i,W as t,X as l,Z as s,$ as e,a0 as n,a1 as o,C as r}from"./framework-a4c02b8f.js";const c={},p=s("h1",{id:"简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),e(" 简介")],-1),d=s("figure",null,[s("img",{src:"https://gitforwindows.org/img/git_logo.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),g=s("p",null,"代码管理对于软件开发而言永远是一个绕不过去的坎。笔者初学编程时对软件的版本没有任何概念，出了问题就改一改，把现在的代码复制保存一份留着以后用，这种方式无疑是是非常混乱的，这也是为什么VCS（Version Control System）会诞生的原因。这类软件的发展史还是蛮长的，笔者曾经短暂的在一个临时参与的项目中使用过SVN，现在应该不太常见了，几乎大部分项目都是在用git进行项目管理。大多数情况下，笔者都只是在拉代码和推代码，其他的命令几乎很少用到，不过这也侧面印证了git的稳定性。写下这些内容是为了对自己git相关知识的进行一个总结，更加熟悉之后，处理一些疑难杂症时会更加得心应手。",-1),v={href:"https://github.com/git/git",target:"_blank",rel:"noopener noreferrer"},f={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},u={class:"hint-container tip"},b=s("p",{class:"hint-container-title"},"提示",-1),m={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},k=o(`<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>git本身是为linux设计的，不过也有windows版本的。</p><figure><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309021510253.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>前往官网下载对应平台的发行版，笔者所使用的是windows版本，下载完成后执行命令查看git是否可用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; git version
git version 2.42.0.windows.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于linux而言，可以使用apt来安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apt install git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum install git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新" aria-hidden="true">#</a> 更新</h3><p>更新git的方法相当简单</p><ol><li>第一种是直接下载新的文件覆盖旧文件</li><li>第二种是执行<code>git update-git-for-windows </code>命令进行更新。</li><li>对于linux而言使用自己对应软件包管理工具的更新方法</li></ol><h2 id="帮助" tabindex="-1"><a class="header-anchor" href="#帮助" aria-hidden="true">#</a> 帮助</h2><p>寻求git帮助的方式有很多种</p><ol><li>在官网查阅命令文档</li><li>执行<code>git help verbs</code>获取详细帮助</li><li>执行<code>git verbs -h</code>来获取简短的描述</li></ol><p>善用这些方法和渠道，因为很多时候出了问题并不会有人来帮你解决，自己多去看看文档说不定会发现问题所在。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>通过<code>git config</code>命令可以查看git配置，比如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--list</span>
<span class="token assign-left variable">diff.astextplain.textconv</span><span class="token operator">=</span>astextplain
<span class="token assign-left variable">filter.lfs.clean</span><span class="token operator">=</span>git-lfs clean -- %f
<span class="token assign-left variable">filter.lfs.smudge</span><span class="token operator">=</span>git-lfs smudge -- %f
<span class="token assign-left variable">filter.lfs.process</span><span class="token operator">=</span>git-lfs filter-process
<span class="token assign-left variable">filter.lfs.required</span><span class="token operator">=</span>true
<span class="token assign-left variable">http.sslbackend</span><span class="token operator">=</span>openssl
<span class="token assign-left variable">http.sslcainfo</span><span class="token operator">=</span>/etc/ssl/certs/ca-bundle.crt
<span class="token assign-left variable">core.autocrlf</span><span class="token operator">=</span>true
<span class="token assign-left variable">core.fscache</span><span class="token operator">=</span>true
<span class="token assign-left variable">core.symlinks</span><span class="token operator">=</span>false
<span class="token assign-left variable">pull.rebase</span><span class="token operator">=</span>false
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，刚安装后，你需要配置你的名称和邮箱，因为这个信息会在你日后对每一个git仓库的每一次提交出现，比如当你和其他人合作开发项目时，突然看到一段很烂的代码，通过这个信息就可以很快的知晓到底是哪个大聪明写的代码。通过<code>--global</code>参数进行全局设置，同样的也可以使用<code>--local</code>来进行局部设置，全局设置会作用到所有的仓库，而局部设置只会覆盖当前的仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;abc&quot;</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;tencent@qq.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过添加<code>--show-origin</code>参数可以很清晰的看到每一个配置的来源。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--list</span> --show-origin
<span class="token comment"># 全局设置</span>
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">diff.astextplain.textconv</span><span class="token operator">=</span>astextplain
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">filter.lfs.clean</span><span class="token operator">=</span>git-lfs clean -- %f
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">filter.lfs.smudge</span><span class="token operator">=</span>git-lfs smudge -- %f
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">filter.lfs.process</span><span class="token operator">=</span>git-lfs filter-process
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">filter.lfs.required</span><span class="token operator">=</span>true
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">http.sslbackend</span><span class="token operator">=</span>openssl
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">http.sslcainfo</span><span class="token operator">=</span>D:/WorkSpace/DevTool/Git/mingw64/etc/ssl/certs/ca-bundle.crt
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">core.autocrlf</span><span class="token operator">=</span>true
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">core.fscache</span><span class="token operator">=</span>true
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">core.symlinks</span><span class="token operator">=</span>false
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">pull.rebase</span><span class="token operator">=</span>false
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">credential.helper</span><span class="token operator">=</span>manager
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     credential.https://dev.azure.com.usehttppath<span class="token operator">=</span>true
file:D:/WorkSpace/DevTool/Git/etc/gitconfig     <span class="token assign-left variable">init.defaultbranch</span><span class="token operator">=</span>master
<span class="token comment"># 来自操作系统的用户设置</span>
file:C:/Users/Stranger/.gitconfig       credential.http://59.110.221.188.provider<span class="token operator">=</span>generic
file:C:/Users/Stranger/.gitconfig       <span class="token assign-left variable">user.name</span><span class="token operator">=</span>abc
file:C:/Users/Stranger/.gitconfig       <span class="token assign-left variable">user.email</span><span class="token operator">=</span>tencent@qq.com
file:C:/Users/Stranger/.gitconfig       credential.https://gitee.com.provider<span class="token operator">=</span>generic
file:C:/Users/Stranger/.gitconfig       <span class="token assign-left variable">http.sslverify</span><span class="token operator">=</span>false
file:C:/Users/Stranger/.gitconfig       http.https://github.com.proxy<span class="token operator">=</span>http://127.0.0.1:7890
file:C:/Users/Stranger/.gitconfig       https.https://github.com.proxy<span class="token operator">=</span>http://127.0.0.1:7890
<span class="token comment"># 来自仓库中的.git目录</span>
file:.git/config        <span class="token assign-left variable">core.repositoryformatversion</span><span class="token operator">=</span><span class="token number">0</span>
file:.git/config        <span class="token assign-left variable">core.filemode</span><span class="token operator">=</span>false
file:.git/config        <span class="token assign-left variable">core.bare</span><span class="token operator">=</span>false
file:.git/config        <span class="token assign-left variable">core.logallrefupdates</span><span class="token operator">=</span>true
file:.git/config        <span class="token assign-left variable">core.symlinks</span><span class="token operator">=</span>false
file:.git/config        <span class="token assign-left variable">core.ignorecase</span><span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>最后说一句，后续的git学习只会使用命令行工具，因为只有命令行才能体验到git的完整功能。掌握了命令行以后，再去使用其他GUI工具就轻而易举了。在windows平台，如果安装成功了的话，是可以直接在cmd和powershell里面使用git命令的，当然也可以使用<code>git bash</code>，这是git自带的命令工具，你可以在鼠标右键菜单中找到它。</p><img src="https://public-1308755698.cos.ap-chongqing.myqcloud.com//img/202309040931066.png" style="zoom:50%;"><p>使用<code>git bash</code>的好处是可以兼容一些基础的linux命令。git有着很多的内置命令，没必要去死记硬背，忘了也很正常，我写这些文章的目的就是为了未来有一天忘了的时候可以回顾这些内容，所以放平心态。</p>`,27);function h(x,_){const a=r("ExternalLinkIcon");return t(),l("div",null,[p,d,g,s("p",null,[e("开源地址（镜像）："),s("a",v,[e("git/git: Git Source Code Mirror"),n(a)])]),s("p",null,[e("官方网站："),s("a",f,[e("Git (git-scm.com)"),n(a)])]),s("div",u,[b,s("p",null,[e("本章内容大量参考"),s("a",m,[e("GitBook"),n(a)]),e("，该书有着良好的中文支持，十分建议阅读。")])]),k])}const S=i(c,[["render",h],["__file","0.introduction.html.vue"]]);export{S as default};
